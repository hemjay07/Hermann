/*! For license information please see main.ece01384a8f6eaeeb696.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatehermann("main",{"./app/pages/Gallery/index.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>m});var n=r("./app/classes/Page.js"),i=(r("./node_modules/lodash/lodash.js"),r("./node_modules/gsap/index.js"));function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function a(e){return function(e){if(Array.isArray(e))return l(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return l(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?l(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,c(n.key),n)}}function c(e){var t=function(e,t){if("object"!=o(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=o(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==o(t)?t:t+""}function u(e,t,r){return t=v(t),function(e,t){if(t&&("object"==o(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,p()?Reflect.construct(t,r||[],v(e).constructor):t.apply(e,r))}function p(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(p=function(){return!!e})()}function f(e,t,r,n){var i=d(v(1&n?e.prototype:e),t,r);return 2&n?function(e){return i.apply(r,e)}:i}function d(){return d="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var n=function(e,t){for(;!{}.hasOwnProperty.call(e,t)&&null!==(e=v(e)););return e}(e,t);if(n){var i=Object.getOwnPropertyDescriptor(n,t);return i.get?i.get.call(arguments.length<3?e:r):i.value}},d.apply(null,arguments)}function v(e){return v=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},v(e)}function y(e,t){return y=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},y(e,t)}var m=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=u(this,t,[{id:"gallery",element:".gallery",elements:{grid:".grid",preview:".preview",gridItems:".grid_item",previewImage:".preview__image",previewClose:".preview__close",previewBackground:".preview__background"}}])).state={isPreviewOpen:!1,currentItem:null,timeline:null},e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&y(e,t)}(t,e),r=t,n=[{key:"create",value:function(){f(t,"create",this,3)([]),this.setupGallery(),this.addEventListeners()}},{key:"setupGallery",value:function(){this.elements.preview.innerHTML='\n            <div class="preview__background"></div>\n            <div class="preview__content">\n                <button class="preview__close">Ã—</button>\n                <div class="preview__image-container"></div>\n            </div>\n        ',this.elements.previewBackground=this.elements.preview.querySelector(".preview__background")}},{key:"addEventListeners",value:function(){var e=this;this.elements.grid.querySelectorAll(".grid_item").forEach((function(t){t.addEventListener("click",(function(r){r.preventDefault(),e.state.isPreviewOpen||e.openPreview(t)}))})),this.elements.preview.querySelector(".preview__close").addEventListener("click",(function(){e.state.isPreviewOpen&&e.closePreview()})),window.addEventListener("keydown",(function(t){"Escape"===t.key&&e.state.isPreviewOpen&&e.closePreview()}))}},{key:"openPreview",value:function(e){this.state.isPreviewOpen=!0,this.state.currentItem=e;var t=e.querySelector("img");this.currentImage=t;var r=t.getBoundingClientRect(),n=this.elements.preview.querySelector(".preview__image-container"),o=t.cloneNode(!0);o.className="preview__transition-image",o.style.position="fixed",o.style.left="".concat(r.left,"px"),o.style.top="".concat(r.top,"px"),o.style.width="".concat(r.width,"px"),o.style.height="".concat(r.height,"px"),o.style.objectFit="cover",o.style.transition="none",n.appendChild(o);var l,s,c=window.innerWidth,u=window.innerHeight,p=.9*c,f=.9*u,d=r.width/r.height;d>p/f?(l=p,s=p/d):(s=f,l=f*d);var v=c/2,y=u/2,m=r.left+r.width/2,w=v-m,h=y-(r.top+r.height/2),g=(l-r.width)/2,b=(s-r.height)/2;this.elements.preview.style.display="block",i.default.set(this.elements.previewBackground,{opacity:0}),i.default.set(t,{opacity:0});var _=i.default.timeline({onComplete:function(){if(t.dataset.large){var e=new Image;e.src=t.dataset.large,e.onload=function(){o.src=t.dataset.large}}}}),O=a(this.elements.grid.querySelectorAll(".grid_item")).filter((function(t){return t!==e})),P=m<c/2?-c:c;_.to(o,{x:w-g,y:h-b,width:l,height:s,duration:1.2,ease:"expo.inOut",reverseEase:!1},0).to(this.elements.previewBackground,{opacity:1,duration:1,ease:"power2.out",reverseEase:!1},.2),O.forEach((function(e,t){_.to(e,{x:P,y:0,scale:.5,opacity:0,duration:.8,ease:"expo.inOut",delay:.02*t,reverseEase:!1},0)})),this.state.timeline=_}},{key:"closePreview",value:function(){var e=this;this.state.isPreviewOpen&&this.state.timeline&&(this.state.timeline.reverse(),this.state.timeline.eventCallback("onReverseComplete",(function(){i.default.set(e.currentImage,{opacity:1});var t=e.elements.preview.querySelector(".preview__transition-image");t&&t.remove(),e.elements.preview.style.display="none",e.state.isPreviewOpen=!1,e.state.currentItem=null,e.state.timeline=null,e.elements.grid.querySelectorAll(".grid_item").forEach((function(e){i.default.set(e,{clearProps:"all"})}))})))}},{key:"destroy",value:function(){f(t,"destroy",this,3)([]),this.state.timeline&&this.state.timeline.kill(),window.removeEventListener("keydown",this.handleKeyDown)}}],n&&s(r.prototype,n),o&&s(r,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,n,o}(n.default)}},(function(e){e.h=()=>"b71e175dc540fa831930"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,