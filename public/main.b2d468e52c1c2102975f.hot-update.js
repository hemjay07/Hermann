/*! For license information please see main.b2d468e52c1c2102975f.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatehermann("main",{"./app/pages/Home/index.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>m});var r=n("./app/classes/Page.js"),o=n("./node_modules/lodash/lodash.js"),a=n("./node_modules/gsap/index.js");function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,u(r.key),r)}}function u(e){var t=function(e,t){if("object"!=i(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=i(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==i(t)?t:t+""}function c(e,t,n){return t=y(t),function(e,t){if(t&&("object"==i(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,f()?Reflect.construct(t,n||[],y(e).constructor):t.apply(e,n))}function f(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(f=function(){return!!e})()}function s(e,t,n,r){var o=p(y(1&r?e.prototype:e),t,n);return 2&r?function(e){return o.apply(n,e)}:o}function p(){return p="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=function(e,t){for(;!{}.hasOwnProperty.call(e,t)&&null!==(e=y(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},p.apply(null,arguments)}function y(e){return y=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},y(e)}function d(e,t){return d=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},d(e,t)}var m=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e=c(this,t,[{id:"home",element:".home",elements:{galleries:".gallery",container:".fake-middle",slider:".slider",homeRevealer:".home__revealer",galleryName:".home__revealer__text"}}]),console.log("indide hoem js"),e.onNavigationCallback=null,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&d(e,t)}(t,e),n=t,(r=[{key:"create",value:function(){s(t,"create",this,3)([]),console.log("super create"),this.addEventListener()}},{key:"destroy",value:function(){s(t,"destroy",this,3)([])}},{key:"addEventListener",value:function(){var e=this;o.forEach(this.elements.galleries,(function(t){var n=t.querySelector("a");n.addEventListener("click",(function(r){r.preventDefault(),r.stopPropagation();var o=t.querySelector("img").alt,a=n.getAttribute("href");e.onNavigationCallback=function(){window.app.onChange({url:a})},console.log(o),e.galleryName=o,e.animate()}))}))}},{key:"animate",value:function(){var e=this,t=a.default.timeline(),n=Math.max(2*window.innerHeight,2*window.innerWidth);return this.elements.galleryName.innerText=this.galleryName,t.set(this.elements.homeRevealer,{y:"".concat(n,"px"),rotate:16}),t.set(this.elements.galleryName,{opacity:0,rotate:-16}),t.addLabel("firstHalf").to(this.elements.homeRevealer,{y:"0",duration:1.2,ease:"power3.inOut"},"firstHalf").to(this.elements.galleryName,{opacity:1,duration:.8,ease:"power2.out"},"firstHalf+=0.4"),t.call((function(){e.onNavigationCallback&&(e.onNavigationCallback(),e.onNavigationCallback=null)}),null,"+=0.5"),t.addLabel("secondHalf").to(this.elements.galleryName,{opacity:0,duration:.6,ease:"power2.in"},"secondHalf").to(this.elements.homeRevealer,{y:"-".concat(n,"px"),duration:1.2,ease:"power3.inOut"},"secondHalf+=0.2"),t}}])&&l(n.prototype,r),i&&l(n,i),Object.defineProperty(n,"prototype",{writable:!1}),n;var n,r,i}(r.default)}},(function(e){e.h=()=>"3ffc4398208c8db99166"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,