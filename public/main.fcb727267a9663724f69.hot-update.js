/*! For license information please see main.fcb727267a9663724f69.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatehermann("main",{"./app/pages/Home/index.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>h});var r=n("./app/classes/Page.js"),o=n("./node_modules/lodash/lodash.js"),i=n("./node_modules/gsap/index.js");function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,s(r.key),r)}}function s(e){var t=function(e,t){if("object"!=a(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=a(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==a(t)?t:t+""}function c(e,t,n){return t=y(t),function(e,t){if(t&&("object"==a(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,l()?Reflect.construct(t,n||[],y(e).constructor):t.apply(e,n))}function l(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(l=function(){return!!e})()}function f(e,t){return f=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},f(e,t)}function m(e,t,n,r){var o=p(y(1&r?e.prototype:e),t,n);return 2&r?function(e){return o.apply(n,e)}:o}function p(){return p="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=function(e,t){for(;!{}.hasOwnProperty.call(e,t)&&null!==(e=y(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},p.apply(null,arguments)}function y(e){return y=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},y(e)}var h=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),m(t,"create",e=c(this,t,[{id:"home",element:".home",elements:{items:".item",container:".fake-middle",slider:".slider",rotate:".content__rotate",move:".content__move",reverse:".content__reverse",hermannRotate:".hermann__rotate",hermannMove:".hermann__move",hermannReverse:".hermann__reverse"}}]),3)([]),console.log(e),e.addEventListener(),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&f(e,t)}(t,e),n=t,(r=[{key:"create",value:function(){m(t,"create",this,3)([])}},{key:"destroy",value:function(){m(t,"destroy",this,3)([])}},{key:"addEventListener",value:function(){var e=this;console.log(this),this.elements.slider,o.forEach(this.elements.items,(function(t){t.addEventListener("click",(function(){e.animate()}))}))}},{key:"animate",value:function(){var e=i.default.timeline();e.set(this.elements.rotate,{rotation:16}).set(this.elements.move,{scale:2}).set(this.elements.reverse,{scale:.5,rotation:-16}).set(this.elements.hermannRotate,{rotation:-16}).set(this.elements.hermannMove,{scale:2}).set(this.elements.hermannReverse,{rotation:16,scale:.5}),e.to(this.elements.move,{y:"-200%",ease:"power3.out",duration:1.2},"moveOut").to(this.elements.reverse,{y:"100%",ease:"power3.out",duration:1.2},"moveOut"),e.to(this.elements.hermannMove,{y:"-200%",ease:"power3.out",duration:1.2},"hermannOut+=1").to(this.elements.hermannReverse,{y:"100%",ease:"power3.out",duration:1.2},"hermannOut+=1"),e.addLabel("hermannOutComplete","+=0.2")}}])&&u(n.prototype,r),a&&u(n,a),Object.defineProperty(n,"prototype",{writable:!1}),n;var n,r,a}(r.default)}},(function(e){e.h=()=>"f813bb404e830f6af63b"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,