/*!******************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./styles/index.scss ***!
  \******************************************************************************************************************************************************/
@charset "UTF-8";
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}

body {
  line-height: 1;
}

ol,
ul {
  list-style: none;
}

blockquote,
q {
  quotes: none;
}

blockquote:before,
blockquote:after,
q:before,
q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

.gallery__details, .contact, .details, .gallery, .overlay, .preloader, .content__move, .content__rotate,
.content__reverse, body, html, .home {
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%;
}

.contact, .details, .preloader {
  align-items: center;
  display: flex;
  justify-content: center;
}

.dg.ac {
  z-index: 99999 !important;
}

.gallery__details__paragraph {
  font-size: 1.6rem;
  font-weight: 300;
  line-height: 1.5;
}
@media (max-width: 767px) {
  .gallery__details__paragraph {
    font-size: 2.8rem;
  }
}

.gallery__details__title {
  font-family: "George X";
  font-size: 8rem;
}

@font-face {
  font-family: "blowbrush";
  src: url(d5e7cdbde66a407b5108.otf) format("opentype"), url(31b0d65ca7795d041afe.ttf) format("truetype");
  font-weight: normal;
  font-style: normal;
}
@font-face {
  font-family: "George X";
  src: url(a4a8eb53627b3d1a4201.woff2) format("woff2"), url(309bcc58a57b38d7fbf6.woff) format("woff");
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Suisse BP";
  src: url(0e6b7bf4aefb74735816.woff2) format("woff2"), url(65915d9417a4a6661e27.woff) format("woff");
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Suisse BP";
  src: url(fa32cf40d8b3cb0a9a0e.woff2) format("woff2"), url(98ccc5d5390b7fe7a79c.woff) format("woff");
  font-weight: 300;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Suisse BP";
  src: url(c186d81e6e7f1863599b.woff2) format("woff2"), url(03ccdb4fca57bb51c559.woff) format("woff");
  font-weight: 200;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Montserrat";
  src: url(7e687123cd4528224ce5.ttf) format("truetype");
  font-weight: normal;
  font-style: normal;
}
*,
*:after,
*:before {
  box-sizing: border-box;
  user-select: none;
  cursor: none;
}

html {
  cursor: none;
  font-size: 0.5208333333vw; /* Set base font size by viewport width for standard resolution */
  line-height: 1;
  position: fixed;
  overflow: hidden;
}
@media (max-width: 767px) {
  html {
    font-size: 1.3333333333vw; /* Adjust font size for phone screen resolutions */
  }
}

body {
  cursor: none;
  display: flex;
  justify-content: center;
  align-items: center;
  position: fixed;
}

.content {
  display: flex;
  justify-content: center;
  align-items: center;
}

.content__rotate,
.content__reverse {
  will-change: transform;
}

.content__move {
  overflow: hidden;
  will-change: transform;
}

.cursor-dot {
  width: 5px;
  height: 5px;
  background-color: hsl(0, 0%, 20%);
}

.cursor-outline {
  width: 30px;
  height: 30px;
  border: 2px solid hsl(78, 100%, 40%);
}
.cursor-outline::after {
  content: attr(data-label);
  position: absolute;
  top: -10px;
  left: 50px;
  padding: 5px 10px;
  background-color: hsla(78, 100%, 90%, 0.6);
  color: hsl(78, 100%, 15%);
  font-size: 20px;
  border-radius: 4px;
  white-space: nowrap;
  display: none;
  pointer-events: none;
}

.image-hover.cursor-outline {
  background-color: hsla(78, 100%, 90%, 0.6);
  border: none;
}

.cursor-outline.image-hover::after {
  display: block;
}

.cursor-dot,
.cursor-outline {
  position: fixed;
  top: 0;
  left: 0;
  transform: translate(-50%, -50%);
  border-radius: 50%;
  z-index: 999999;
  pointer-events: none;
}

/* Pseudo-element for the label next to the cursor */
/* Show the label when hovering over an image */
a {
  color: inherit;
  outline: none;
  text-decoration: none;
}

button {
  background: none;
  border: none;
  color: inherit;
  cursor: pointer;
  outline: none;
}

canvas {
  pointer-events: none;
  position: relative;
}

[data-animation=title] span,
[data-animation=label] span,
[data-animation=paragraph] span {
  display: inline-block;
  overflow: hidden;
  vertical-align: top;
}

.page-transition {
  position: fixed;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  z-index: 3000;
  display: none;
  pointer-events: none;
}
.page-transition__layer {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  transform: translate3d(100%, 0, 0);
  will-change: transform;
  pointer-events: none;
}
.page-transition__layer:nth-child(1) {
  background: hsl(90, 100%, 50%);
  z-index: 3001;
}
.page-transition__layer:nth-child(2) {
  background: hsl(200, 100%, 50%);
  z-index: 3002;
}
.page-transition__layer:nth-child(3) {
  background: hsl(45, 100%, 50%);
  z-index: 3003;
}
.page-transition.is-animating {
  display: block;
}
.page-transition.is-animating-next .page-transition__layer {
  animation: layer-slide-next-1 1.5s cubic-bezier(0.55, 0.055, 0.675, 0.19) forwards;
}
.page-transition.is-animating-next .page-transition__layer:nth-child(2) {
  animation-name: layer-slide-next-2;
}
.page-transition.is-animating-next .page-transition__layer:nth-child(3) {
  animation-name: layer-slide-next-3;
}

@keyframes layer-slide-next-1 {
  0% {
    transform: translate3d(100%, 0, 0);
  }
  25%, 75% {
    transform: translate3d(0, 0, 0);
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }
  100% {
    transform: translate3d(-100%, 0, 0);
  }
}
@keyframes layer-slide-next-2 {
  0%, 12.5% {
    transform: translate3d(100%, 0, 0);
  }
  37.5%, 62.5% {
    transform: translate3d(0, 0, 0);
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }
  87.5%, 100% {
    transform: translate3d(-100%, 0, 0);
  }
}
@keyframes layer-slide-next-3 {
  0%, 25% {
    transform: translate3d(100%, 0, 0);
    animation-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1);
  }
  75%, 100% {
    transform: translate3d(-100%, 0, 0);
  }
}
.page-transition.is-animating-prev .page-transition__layer {
  animation: layer-slide-prev-1 1.5s cubic-bezier(0.55, 0.055, 0.675, 0.19) forwards;
}
.page-transition.is-animating-prev .page-transition__layer:nth-child(2) {
  animation-name: layer-slide-prev-2;
}
.page-transition.is-animating-prev .page-transition__layer:nth-child(3) {
  animation-name: layer-slide-prev-3;
}

@keyframes layer-slide-prev-1 {
  0% {
    transform: translate3d(-100%, 0, 0);
  }
  25%, 75% {
    transform: translate3d(0, 0, 0);
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }
  100% {
    transform: translate3d(100%, 0, 0);
  }
}
@keyframes layer-slide-prev-2 {
  0%, 12.5% {
    transform: translate3d(-100%, 0, 0);
  }
  37.5%, 62.5% {
    transform: translate3d(0, 0, 0);
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }
  87.5%, 100% {
    transform: translate3d(100%, 0, 0);
  }
}
@keyframes layer-slide-prev-3 {
  0%, 25% {
    transform: translate3d(-100%, 0, 0);
    animation-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1);
  }
  75%, 100% {
    transform: translate3d(100%, 0, 0);
  }
}
.preloader {
  display: flex;
  flex-direction: column;
  gap: 3rem;
  background-color: hsl(0, 1%, 27%);
  color: hsl(78, 100%, 45%);
  z-index: 3;
}

.overlay {
  background-color: hsla(0, 0%, 0%, 0.75);
  z-index: 4;
}

.preloader__text {
  font-family: "blowbrush";
  font-size: 6.5rem;
  max-width: 66rem;
  z-index: 677;
  text-shadow: 0 0 50px hsla(0, 0%, 0%, 0.4);
}

.preloader__number {
  font-size: 2rem;
  z-index: 677;
}

.frame {
  position: absolute;
  width: 100%; /* Adjust as needed */
  height: 100%; /* Adjust as needed */
  top: 0;
  left: 0;
  opacity: 0; /* Start with frames hidden */
  transition: opacity 0.5s ease-in; /* Smooth transition between frames */
}

.frame img {
  position: absolute;
  background: rgba(255, 255, 255, 0.208);
  opacity: 1;
  height: 100%;
}

.frame1 .img1 {
  top: 0;
  left: 50vw;
}

.frame1 .img2 {
  top: 0;
  right: 50vw;
}

.frame2 .img1 {
  top: 0;
  left: 50vw;
}

.frame2 .img2 {
  top: 0;
  right: 50vw;
}

.frame3 .img1 {
  top: 50%;
  transform: translateY(-50%);
  left: 50vw;
  width: 500px;
  height: 500px;
}

.frame3 .img2 {
  top: 0;
  right: 50vw;
}

.frame4 .img1 {
  top: 0;
  right: 50vw;
  width: 400px;
  height: 400px;
  z-index: 6;
}

.frame4 .img2 {
  top: 0;
  right: 50vw;
}

.frame4 .img3 {
  top: 0;
  left: 50vw;
}

.frame5 .img1 {
  top: 0;
  left: 50vw;
}

.frame5 .img2 {
  top: 0;
  right: 50vw;
}

.frame6 .img1 {
  top: 0;
  left: 50vw;
}

.frame6 .img2 {
  top: 0;
  right: 50vw;
}

.frame6 .img3 {
  bottom: 0;
  left: 50vw;
  height: 60%;
}

.frame7 .img1 {
  top: 0;
  left: 50vw;
}

.frame7 .img2 {
  top: 0;
  right: 50vw;
}

.frame7 .img3 {
  bottom: 20px;
  left: 50vw;
  height: 60%;
}

.frame7 .img4 {
  top: 40px;
  right: 50vw;
  height: 550px;
  width: 500px;
}

.frame8 .img1 {
  top: 0;
  left: 50vw;
}

.frame8 .img2 {
  top: 0;
  right: 50vw;
}

.frame8 .img3 {
  top: 40px;
  right: 50vw;
  height: 550px;
  width: 500px;
}

.frame9 .img1 {
  top: 0;
  left: 50vw;
}

.frame9 .img2 {
  top: 0;
  right: 50vw;
}

.frame10 .img1 {
  top: 0;
  left: 50vw;
}

.frame10 .img2 {
  top: 0;
  right: 50vw;
}

.frame11 .img1 {
  top: 0;
  left: 50vw;
}

.frame11 .img2 {
  top: 0;
  right: 50vw;
}

.frame12 .img1 {
  top: 0;
  left: 50vw;
}

.frame12 .img2 {
  top: 0;
  right: 50vw;
}

.frame12 .img3 {
  top: 0;
  right: 50vw;
  height: 550px;
  width: 500px;
}

.frame12 .img4 {
  bottom: 0;
  left: 50vw;
  height: 550px;
  width: 500px;
}

@keyframes switchFrames {
  0% {
    opacity: 1;
  } /* Frame is visible */
  8.33% {
    opacity: 1;
  } /* Maintain visibility */
  8.34% {
    opacity: 0;
  } /* Start fading out */
  100% {
    opacity: 0;
  } /* Remain hidden */
}
.frame1 {
  animation: switchFrames 6s infinite;
}

.frame2 {
  animation: switchFrames 6s infinite;
  animation-delay: 0.5s;
}

.frame3 {
  animation: switchFrames 6s infinite;
  animation-delay: 1s;
}

.frame4 {
  animation: switchFrames 6s infinite;
  animation-delay: 1.5s;
}

.frame5 {
  animation: switchFrames 6s infinite;
  animation-delay: 2s;
}

.frame6 {
  animation: switchFrames 6s infinite;
  animation-delay: 2.5s;
}

.frame7 {
  animation: switchFrames 6s infinite;
  animation-delay: 3s;
}

.frame8 {
  animation: switchFrames 6s infinite;
  animation-delay: 3.5s;
}

.frame9 {
  animation: switchFrames 6s infinite;
  animation-delay: 4s;
}

.frame10 {
  animation: switchFrames 6s infinite;
  animation-delay: 4.5s;
}

.frame11 {
  animation: switchFrames 6s infinite;
  animation-delay: 5s;
}

.frame12 {
  animation: switchFrames 6s infinite;
  animation-delay: 5.5s;
}

.navigation {
  position: fixed;
  top: 0;
  right: 0;
  width: auto;
  height: 100vh;
  z-index: 2;
}

.navigation__overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background-color: rgba(0, 0, 0, 0.2);
  opacity: 0;
  pointer-events: none;
  z-index: 3;
  transition: opacity 0.3s ease;
}
.navigation__overlay.is-active {
  opacity: 1;
  pointer-events: all !important;
}
@media screen and (max-width: 768px) {
  .navigation__overlay {
    display: none;
  }
}

.navigation__button {
  position: fixed;
  top: 4rem;
  right: 4rem;
  width: 7rem;
  height: 7rem;
  border: none;
  background: none;
  padding: 0;
  cursor: pointer;
  z-index: 5;
}

.navigation__button-circle {
  position: relative;
  width: 100%;
  height: 100%;
}
.navigation__button-circle::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: hsl(90, 100%, 50%);
  border-radius: 50%;
  transform: scale(0);
  transform-origin: center;
  transition: transform 0.6s cubic-bezier(0.7, 0, 0.2, 1);
  box-shadow: 0 0 20px rgba(145, 255, 0, 0.2);
}
.navigation__button:hover .navigation__button-circle::before, .navigation__button.is-active .navigation__button-circle::before {
  transform: scale(1);
}
.navigation__button-circle svg {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
.navigation__button-circle svg circle {
  fill: hsl(78, 100%, 15%);
  transition: fill 0.3s ease;
}
.navigation__button:hover .navigation__button-circle svg circle, .navigation__button.is-active .navigation__button-circle svg circle {
  fill: transparent;
}

.navigation__button-icon {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 2.5rem;
  height: 2.25rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  z-index: 1;
}
.navigation__button-icon span {
  position: relative;
  width: 100%;
  height: 3px;
  background-color: #fff;
  transform-origin: center;
  transition: transform 0.3s ease, width 0.3s ease, opacity 0.3s ease;
}
.navigation__button-icon span:nth-child(2) {
  width: 70%;
  margin-left: auto;
}
.navigation__button-icon span:first-child {
  transform-origin: center;
}
.navigation__button-icon span:last-child {
  transform-origin: center;
}
.navigation__button:hover .navigation__button-icon span {
  width: 100%;
}

.navigation__menu-wrapper {
  position: fixed;
  top: 0;
  right: 0;
  width: 100%;
  height: 100%;
  max-width: 40vw;
  pointer-events: none;
  z-index: 4;
  visibility: hidden;
  overflow: hidden;
}
@media screen and (max-width: 768px) {
  .navigation__menu-wrapper {
    max-width: 100%;
  }
}

.navigation__menu-background {
  position: absolute;
  top: 0;
  right: 0;
  width: 100%;
  height: 100%;
  background-color: hsl(78, 100%, 15%);
  transform-origin: right center;
  transform: scaleX(0);
  pointer-events: all;
  background-image: linear-gradient(0deg, rgba(255, 255, 255, 0.03) 1px, transparent 1px), linear-gradient(90deg, rgba(255, 255, 255, 0.03) 1px, transparent 1px);
  background-size: 20px 20px;
  background-position: center center;
}

.navigation__menu {
  position: relative;
  z-index: 1;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  pointer-events: all;
}
.navigation__menu::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(45deg, rgba(255, 255, 255, 0.03) 0%, transparent 100%);
  pointer-events: none;
}

.navigation__menu-list {
  list-style: none;
  padding: 0;
  margin: 0;
  text-align: left;
}

.navigation__menu-list-item {
  margin: 4rem 0;
  opacity: 0;
  transform: translateY(2rem);
  position: relative;
  padding-left: 3rem;
  font-size: calc(clamp(3.25em, 5vw, 4em) * 0.5);
}
.navigation__menu-list-item::before {
  content: "•";
  position: absolute;
  left: 0;
  color: white;
  line-height: 1;
  opacity: 0.5;
  top: 15%;
  font-size: calc(clamp(3.25em, 5vw, 4em) * 0.5);
  transition: opacity 0.3s ease;
}
.navigation__menu-list-item:hover::before {
  opacity: 0.8;
}
.navigation__menu-list-item a {
  display: inline-block;
  color: white;
  text-decoration: none;
  font-size: calc(clamp(3.25em, 5vw, 4em) * 0.875);
  font-weight: 300;
  font-family: "George X";
  line-height: 1;
  transition: all 0.3s ease;
  letter-spacing: -0.02em;
}
.navigation__menu-list-item a:hover {
  opacity: 0.8;
  transform: translateX(10px);
  letter-spacing: 0;
}

.gallery {
  background: hsl(0, 3%, 14%);
  overflow: hidden;
  position: fixed;
  width: 100%;
  height: 100%;
}
.gallery__content {
  position: relative;
  z-index: 1;
  width: 100%;
  height: 100%;
}
.gallery__navigation {
  position: fixed;
  z-index: 2000;
  top: 50%;
  transform: translateY(-50%);
  width: 100%;
  pointer-events: none;
}
.gallery__nav {
  position: absolute;
  pointer-events: auto;
  padding: 1rem 2rem;
  background: rgba(255, 255, 255, 0.1);
  border: none;
  color: white;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 1rem;
  border-radius: 4px;
  mix-blend-mode: difference;
}
.gallery__nav:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: scale(1.05);
}
.gallery__nav--prev {
  left: 2rem;
}
.gallery__nav--next {
  right: 2rem;
}

.grid {
  --gap: clamp(1rem, 5vmin, 2rem);
  --columns: 250px;
  gap: var(--gap);
  columns: var(--columns);
  width: 96%;
  max-width: 1400px;
  margin: 5rem auto;
  position: relative;
  will-change: transform, opacity;
  z-index: 1;
}
@media (min-width: 768px) {
  .grid {
    --columns: 300px;
  }
}

.grid_item {
  break-inside: avoid;
  margin-bottom: var(--gap);
  position: relative;
  cursor: pointer;
  overflow: hidden;
  transform-origin: center center;
  will-change: transform, opacity;
}
.grid_item img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  filter: grayscale(100%);
  transition: filter 0.4s ease, transform 0.4s ease;
  will-change: transform, filter;
}
.grid_item img:hover {
  filter: grayscale(0);
  transform: scale(1.03);
}
.grid_item::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.2);
  opacity: 0;
  transition: opacity 0.4s ease;
}
.grid_item:hover::after {
  opacity: 1;
}

.preview {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: none;
  z-index: 1000;
}
.preview__background {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: hsl(0, 3%, 14%);
  opacity: 0;
  will-change: opacity;
}
.preview__content {
  position: relative;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}
.preview__close {
  position: fixed;
  top: 2rem;
  right: 2rem;
  width: 4rem;
  height: 4rem;
  border: none;
  background: transparent;
  color: white;
  font-size: 2rem;
  cursor: pointer;
  z-index: 1001;
  opacity: 0;
  transition: opacity 0.3s ease, transform 0.3s ease;
  mix-blend-mode: difference;
}
.preview__close:hover {
  transform: scale(1.1);
}
.preview__close::before, .preview__close::after {
  content: "";
  position: absolute;
  top: 50%;
  left: 50%;
  width: 2px;
  height: 2rem;
  background: white;
  transform-origin: center;
}
.preview__close::before {
  transform: translate(-50%, -50%) rotate(45deg);
}
.preview__close::after {
  transform: translate(-50%, -50%) rotate(-45deg);
}
.preview__transition-image {
  position: fixed;
  object-fit: cover;
  z-index: 1001;
  will-change: transform, width, height;
  transform-origin: center center;
  filter: brightness(1.1);
}
.preview__image-container {
  position: relative;
  width: 100%;
  height: 100%;
}

.preview--open {
  display: block;
}
.preview--open .preview__close {
  opacity: 1;
}

.no-scroll {
  overflow: hidden;
}

.home {
  padding-top: 7rem;
  font-family: "blowbrush";
  font-size: 3rem;
  background-color: #f5f5f5;
  color: #444444;
}

.galleries {
  font-family: "blowbrush";
  color: hsl(78, 100%, 15%);
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
  top: 4rem;
  z-index: 2;
  font-size: 6rem;
}
@media (max-width: 767px) {
  .galleries {
    top: 17rem;
  }
}

.box {
  width: 100vw;
  height: 100vh;
  background-color: purple;
}

.banner {
  position: absolute;
  z-index: 1;
  margin-top: 10vh;
  width: 100%;
  display: grid;
  justify-items: center;
  height: 100vh;
}
@media (max-width: 767px) {
  .banner {
    margin-top: 18vh;
  }
}

.banner .slider {
  top: 0;
  width: 20vw;
  max-width: 170px;
  aspect-ratio: 3/4;
  transform-style: preserve-3d;
  transform: perspective(1000px); /* Ensure it's horizontally centered */
  animation: autoRun 42s linear infinite;
}

@keyframes autoRun {
  from {
    transform: perspective(1000px) rotateX(-16deg) rotateY(0deg);
  }
  to {
    transform: perspective(1000px) rotateX(-16deg) rotateY(360deg);
  }
}
.banner .slider .gallery__image {
  position: absolute;
  inset: 0 0 0 0;
  transform: rotateY(calc(var(--position) * 360 / var(--quantity) * -1deg)) translateZ(min(38vw, 480px));
  transform-style: preserve-3d;
}

.gallery__image img {
  filter: grayscale(100%);
  width: 100%;
  height: 100%;
  object-fit: cover;
  animation: grayscaleEffect 42s infinite;
  z-index: 1;
}

.in-view img {
  filter: grayscale(0%);
}

/* Keyframes to control the grayscale removal based on time */
@keyframes grayscaleEffect {
  20% {
    filter: grayscale(0%);
  }
  70% {
    filter: grayscale(100%);
  }
  100% {
    filter: grayscale(100%);
  }
}
@keyframes opacityEffect {
  4% {
    opacity: 0;
  }
  12% {
    opacity: 1;
  }
  22% {
    opacity: 0;
  }
  100% {
    opacity: 0;
  }
}
/* For each item, delay the animation by 3s incrementally */
.banner .slider .gallery__image:nth-child(1) img,
.gallery__details .gallery__details__item:nth-child(1) {
  animation-delay: 0s; /* Start immediately */
}

.banner .slider .gallery__image:nth-child(2) img,
.gallery__details .gallery__details__item:nth-child(2) {
  animation-delay: 6s; /* Delay by 3 seconds */
}

.banner .slider .gallery__image:nth-child(3) img,
.gallery__details .gallery__details__item:nth-child(3) {
  animation-delay: 12s; /* Delay by 6 seconds */
}

.banner .slider .gallery__image:nth-child(4) img,
.gallery__details .gallery__details__item:nth-child(4) {
  animation-delay: 18s; /* Delay by 9 seconds */
}

.banner .slider .gallery__image:nth-child(5) img,
.gallery__details .gallery__details__item:nth-child(5) {
  animation-delay: 24s; /* Delay by 12 seconds */
}

.banner .slider .gallery__image:nth-child(6) img,
.gallery__details .gallery__details__item:nth-child(6) {
  animation-delay: 30s; /* Delay by 15 seconds */
}

.banner .slider .gallery__image:nth-child(7) img,
.gallery__details .gallery__details__item:nth-child(7) {
  animation-delay: 36s; /* Delay by 15 seconds */
}

.gallery__details__item {
  opacity: 0;
  position: absolute;
  top: 70vh;
  left: 8rem;
  transition: opacity 1.5s ease-in;
  animation: opacityEffect 42s infinite;
}
@media (max-width: 767px) {
  .gallery__details__item {
    top: 60vh;
  }
}

.gallery__details__title {
  color: hsl(78, 100%, 15%);
}

.gallery__details__paragraph {
  font-family: "Montserrat";
  margin-top: 2rem;
  max-width: 44rem;
}

.revealer {
  width: max(200vw, 200vh);
  height: max(200vw, 200vh);
  position: absolute;
  z-index: 10;
  background-color: hsl(90, 100%, 50%);
  display: flex;
  justify-content: center;
  align-items: center;
  transform: translate(0, max(200vw, 200vh)) rotate(16deg);
  will-change: transform;
}
.revealer ul {
  list-style: disc;
  /* Ensure the list uses dots */
  padding-left: 20px;
  /* Adjust spacing if needed */
}

.revealer__text {
  will-change: opacity;
  color: black;
  font-size: 7.5rem;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/