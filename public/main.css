/*!******************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./styles/index.scss ***!
  \******************************************************************************************************************************************************/
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}

body {
  line-height: 1;
}

ol,
ul {
  list-style: none;
}

blockquote,
q {
  quotes: none;
}

blockquote:before,
blockquote:after,
q:before,
q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

.gallery__details, .contact, .details, .navigation, .overlay, .preloader, .content__move, .content__rotate,
.content__reverse, body, html, .home {
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%;
}

.contact, .details, .preloader {
  align-items: center;
  display: flex;
  justify-content: center;
}

.dg.ac {
  z-index: 99999 !important;
}

.gallery__details__paragraph {
  font-size: 1.6rem;
  font-weight: 300;
  line-height: 1.5;
}
@media (max-width: 767px) {
  .gallery__details__paragraph {
    font-size: 2.8rem;
  }
}

.navigation__list__link, .navigation__link {
  font-family: "George X";
  font-size: 2rem;
}
@media (max-width: 767px) {
  .navigation__list__link, .navigation__link {
    font-size: 3rem;
  }
}

.gallery__details__title {
  font-family: "George X";
  font-size: 8rem;
}

@font-face {
  font-family: "blowbrush";
  src: url(d5e7cdbde66a407b5108.otf) format("opentype"), url(31b0d65ca7795d041afe.ttf) format("truetype");
  font-weight: normal;
  font-style: normal;
}
@font-face {
  font-family: "George X";
  src: url(a4a8eb53627b3d1a4201.woff2) format("woff2"), url(309bcc58a57b38d7fbf6.woff) format("woff");
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Suisse BP";
  src: url(0e6b7bf4aefb74735816.woff2) format("woff2"), url(65915d9417a4a6661e27.woff) format("woff");
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Suisse BP";
  src: url(fa32cf40d8b3cb0a9a0e.woff2) format("woff2"), url(98ccc5d5390b7fe7a79c.woff) format("woff");
  font-weight: 300;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Suisse BP";
  src: url(c186d81e6e7f1863599b.woff2) format("woff2"), url(03ccdb4fca57bb51c559.woff) format("woff");
  font-weight: 200;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Montserrat";
  src: url(7e687123cd4528224ce5.ttf) format("truetype");
  font-weight: normal;
  font-style: normal;
}
*,
*:after,
*:before {
  box-sizing: border-box;
  user-select: none;
  cursor: none;
}

html {
  cursor: none;
  font-size: 0.5208333333vw; /* Set base font size by viewport width for standard resolution */
  line-height: 1;
  position: fixed;
  overflow: hidden;
}
@media (max-width: 767px) {
  html {
    font-size: 1.3333333333vw; /* Adjust font size for phone screen resolutions */
  }
}

body {
  cursor: none;
  position: fixed;
}

.content {
  display: flex;
  justify-content: center;
  align-items: center;
}

.content__rotate,
.content__reverse {
  will-change: transform;
}

.content__move {
  overflow: hidden;
  will-change: transform;
}

.cursor-dot {
  width: 5px;
  height: 5px;
  background-color: hsl(0, 0%, 20%);
}

.cursor-outline {
  width: 30px;
  height: 30px;
  border: 2px solid hsl(78, 100%, 40%);
}
.cursor-outline::after {
  content: attr(data-label);
  position: absolute;
  top: -10px;
  left: 50px;
  padding: 5px 10px;
  color: hsl(78, 100%, 15%);
  font-size: 16px;
  border-radius: 4px;
  white-space: nowrap;
  display: none;
  pointer-events: none;
}

.image-hover.cursor-outline {
  background-color: hsla(78, 100%, 90%, 0.6);
  border: none;
}

.cursor-outline.image-hover::after {
  display: block;
}

.cursor-dot,
.cursor-outline {
  position: fixed;
  top: 0;
  left: 0;
  transform: translate(-50%, -50%);
  border-radius: 50%;
  z-index: 999999;
  pointer-events: none;
}

/* Pseudo-element for the label next to the cursor */
/* Show the label when hovering over an image */
a {
  color: inherit;
  outline: none;
  text-decoration: none;
}

button {
  background: none;
  border: none;
  color: inherit;
  cursor: pointer;
  outline: none;
}

canvas {
  pointer-events: none;
  position: relative;
}

[data-animation=title] span,
[data-animation=label] span,
[data-animation=paragraph] span {
  display: inline-block;
  overflow: hidden;
  vertical-align: top;
}

.preloader {
  display: flex;
  flex-direction: column;
  gap: 3rem;
  background-color: hsl(0, 1%, 27%);
  color: hsl(78, 100%, 45%);
  z-index: 3;
}

.overlay {
  background-color: hsla(0, 0%, 0%, 0.75);
  z-index: 4;
}

.preloader__text {
  font-family: "blowbrush";
  font-size: 6.5rem;
  max-width: 66rem;
  z-index: 677;
  text-shadow: 0 0 50px hsla(0, 0%, 0%, 0.4);
}

.preloader__number {
  font-size: 2rem;
  z-index: 677;
}

.frame {
  position: absolute;
  width: 100%; /* Adjust as needed */
  height: 100%; /* Adjust as needed */
  top: 0;
  left: 0;
  opacity: 0; /* Start with frames hidden */
  transition: opacity 0.5s ease-in; /* Smooth transition between frames */
}

.frame img {
  position: absolute;
  background: rgba(255, 255, 255, 0.208);
  opacity: 1;
  height: 100%;
}

.frame1 .img1 {
  top: 0;
  left: 50vw;
}

.frame1 .img2 {
  top: 0;
  right: 50vw;
}

.frame2 .img1 {
  top: 0;
  left: 50vw;
}

.frame2 .img2 {
  top: 0;
  right: 50vw;
}

.frame3 .img1 {
  top: 50%;
  transform: translateY(-50%);
  left: 50vw;
  width: 500px;
  height: 500px;
}

.frame3 .img2 {
  top: 0;
  right: 50vw;
}

.frame4 .img1 {
  top: 0;
  right: 50vw;
  width: 400px;
  height: 400px;
  z-index: 6;
}

.frame4 .img2 {
  top: 0;
  right: 50vw;
}

.frame4 .img3 {
  top: 0;
  left: 50vw;
}

.frame5 .img1 {
  top: 0;
  left: 50vw;
}

.frame5 .img2 {
  top: 0;
  right: 50vw;
}

.frame6 .img1 {
  top: 0;
  left: 50vw;
}

.frame6 .img2 {
  top: 0;
  right: 50vw;
}

.frame6 .img3 {
  bottom: 0;
  left: 50vw;
  height: 60%;
}

.frame7 .img1 {
  top: 0;
  left: 50vw;
}

.frame7 .img2 {
  top: 0;
  right: 50vw;
}

.frame7 .img3 {
  bottom: 20px;
  left: 50vw;
  height: 60%;
}

.frame7 .img4 {
  top: 40px;
  right: 50vw;
  height: 550px;
  width: 500px;
}

.frame8 .img1 {
  top: 0;
  left: 50vw;
}

.frame8 .img2 {
  top: 0;
  right: 50vw;
}

.frame8 .img3 {
  top: 40px;
  right: 50vw;
  height: 550px;
  width: 500px;
}

.frame9 .img1 {
  top: 0;
  left: 50vw;
}

.frame9 .img2 {
  top: 0;
  right: 50vw;
}

.frame10 .img1 {
  top: 0;
  left: 50vw;
}

.frame10 .img2 {
  top: 0;
  right: 50vw;
}

.frame11 .img1 {
  top: 0;
  left: 50vw;
}

.frame11 .img2 {
  top: 0;
  right: 50vw;
}

.frame12 .img1 {
  top: 0;
  left: 50vw;
}

.frame12 .img2 {
  top: 0;
  right: 50vw;
}

.frame12 .img3 {
  top: 0;
  right: 50vw;
  height: 550px;
  width: 500px;
}

.frame12 .img4 {
  bottom: 0;
  left: 50vw;
  height: 550px;
  width: 500px;
}

@keyframes switchFrames {
  0% {
    opacity: 1;
  } /* Frame is visible */
  8.33% {
    opacity: 1;
  } /* Maintain visibility */
  8.34% {
    opacity: 0;
  } /* Start fading out */
  100% {
    opacity: 0;
  } /* Remain hidden */
}
.frame1 {
  animation: switchFrames 6s infinite;
}

.frame2 {
  animation: switchFrames 6s infinite;
  animation-delay: 0.5s;
}

.frame3 {
  animation: switchFrames 6s infinite;
  animation-delay: 1s;
}

.frame4 {
  animation: switchFrames 6s infinite;
  animation-delay: 1.5s;
}

.frame5 {
  animation: switchFrames 6s infinite;
  animation-delay: 2s;
}

.frame6 {
  animation: switchFrames 6s infinite;
  animation-delay: 2.5s;
}

.frame7 {
  animation: switchFrames 6s infinite;
  animation-delay: 3s;
}

.frame8 {
  animation: switchFrames 6s infinite;
  animation-delay: 3.5s;
}

.frame9 {
  animation: switchFrames 6s infinite;
  animation-delay: 4s;
}

.frame10 {
  animation: switchFrames 6s infinite;
  animation-delay: 4.5s;
}

.frame11 {
  animation: switchFrames 6s infinite;
  animation-delay: 5s;
}

.frame12 {
  animation: switchFrames 6s infinite;
  animation-delay: 5.5s;
}

.navigation {
  height: max-content;
  font-size: 16px;
  padding: 2rem 4rem;
  z-index: 2;
  display: flex;
  justify-content: space-between;
  color: hsl(78, 100%, 15%);
  font-family: "George X";
}

.navigation__link {
  text-decoration: none;
}

.navigation__list {
  display: flex;
  gap: 4rem;
}

.navigation__list__link {
  text-decoration: none;
}

.home {
  padding-top: 7rem;
  font-family: "blowbrush";
  font-size: 3rem;
  background-color: #f5f5f5;
  color: #444444;
}

.galleries {
  font-family: "blowbrush";
  color: hsl(78, 100%, 15%);
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
  top: 4rem;
  z-index: 2;
  font-size: 6rem;
}
@media (max-width: 767px) {
  .galleries {
    top: 17rem;
  }
}

.box {
  width: 100vw;
  height: 100vh;
  background-color: purple;
}

.banner {
  position: absolute;
  z-index: 1;
  margin-top: 10vh;
  width: 100%;
  display: grid;
  justify-items: center;
  height: 100vh;
}
@media (max-width: 767px) {
  .banner {
    margin-top: 18vh;
  }
}

.banner .slider {
  top: 0;
  width: 20vw;
  max-width: 170px;
  aspect-ratio: 3/4;
  transform-style: preserve-3d;
  transform: perspective(1000px); /* Ensure it's horizontally centered */
  animation: autoRun 42s linear infinite;
}

@keyframes autoRun {
  from {
    transform: perspective(1000px) rotateX(-16deg) rotateY(0deg);
  }
  to {
    transform: perspective(1000px) rotateX(-16deg) rotateY(360deg);
  }
}
.banner .slider .item {
  position: absolute;
  inset: 0 0 0 0;
  transform: rotateY(calc(var(--position) * 360 / var(--quantity) * -1deg)) translateZ(min(38vw, 480px));
  transform-style: preserve-3d;
}

.item img {
  filter: grayscale(100%);
  width: 100%;
  height: 100%;
  object-fit: cover;
  animation: grayscaleEffect 42s infinite;
  z-index: 1;
}

.in-view img {
  filter: grayscale(0%);
}

/* Keyframes to control the grayscale removal based on time */
@keyframes grayscaleEffect {
  20% {
    filter: grayscale(0%);
  }
  70% {
    filter: grayscale(100%);
  }
  100% {
    filter: grayscale(100%);
  }
}
@keyframes opacityEffect {
  4% {
    opacity: 0;
  }
  12% {
    opacity: 1;
  }
  22% {
    opacity: 0;
  }
  100% {
    opacity: 0;
  }
}
/* For each item, delay the animation by 3s incrementally */
.banner .slider .item:nth-child(1) img,
.gallery__details .gallery__details__item:nth-child(1) {
  animation-delay: 0s; /* Start immediately */
}

.banner .slider .item:nth-child(2) img,
.gallery__details .gallery__details__item:nth-child(2) {
  animation-delay: 6s; /* Delay by 3 seconds */
}

.banner .slider .item:nth-child(3) img,
.gallery__details .gallery__details__item:nth-child(3) {
  animation-delay: 12s; /* Delay by 6 seconds */
}

.banner .slider .item:nth-child(4) img,
.gallery__details .gallery__details__item:nth-child(4) {
  animation-delay: 18s; /* Delay by 9 seconds */
}

.banner .slider .item:nth-child(5) img,
.gallery__details .gallery__details__item:nth-child(5) {
  animation-delay: 24s; /* Delay by 12 seconds */
}

.banner .slider .item:nth-child(6) img,
.gallery__details .gallery__details__item:nth-child(6) {
  animation-delay: 30s; /* Delay by 15 seconds */
}

.banner .slider .item:nth-child(7) img,
.gallery__details .gallery__details__item:nth-child(7) {
  animation-delay: 36s; /* Delay by 15 seconds */
}

.gallery__details__item {
  opacity: 0;
  position: absolute;
  top: 70vh;
  left: 8rem;
  transition: opacity 1.5s ease-in;
  animation: opacityEffect 42s infinite;
}
@media (max-width: 767px) {
  .gallery__details__item {
    top: 60vh;
  }
}

.gallery__details__title {
  color: hsl(78, 100%, 15%);
}

.gallery__details__paragraph {
  font-family: "Montserrat";
  margin-top: 2rem;
  max-width: 44rem;
}

.home__revealer {
  width: 300vh;
  height: 300vh;
  position: absolute;
  z-index: 10;
  background-color: black;
  display: flex;
  justify-content: center;
  align-items: center;
  transform: translate(0, 300vh) rotate(16deg);
  will-change: transform;
}

.home__revealer__text {
  font-family: "blowbrush";
  color: hsl(78, 100%, 55%);
  font-size: 6.5rem;
  will-change: opacity;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5jc3MiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQWlGRTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QUNDRjs7QURFQTs7Ozs7Ozs7Ozs7RUFXRTtBQ0NGOztBREVBO0VBQ0U7QUNDRjs7QURFQTs7RUFFRTtBQ0NGOztBREVBOztFQUVFO0FDQ0Y7O0FERUE7Ozs7RUFJRTtFQUNBO0FDQ0Y7O0FERUE7RUFDRTtFQUNBO0FDQ0Y7O0FDaElBOztFQUNFO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QURvSUY7O0FDaklBO0VBQ0U7RUFDQTtFQUNBO0FEb0lGOztBRS9JQTtFQUNFO0FGa0pGOztBR25JQTtFQUNFO0VBQ0E7RUFDQTtBSHNJRjtBSThhSTtFRHZqQko7SUFNSTtFSHVJRjtBQUNGOztBSzlKQTtFQUNFLHVCQ0tjO0VESmQ7QUxpS0Y7QUlvYUk7RUN2a0JKO0lBS0k7RUxrS0Y7QUFDRjs7QUtoSkE7RUFDRSx1QkNuQmM7RURvQmQ7QUxtSkY7O0FPN0tBO0VBQ0Usd0JET2U7RUNOZjtFQUVBO0VBQ0E7QVArS0Y7QU81S0E7RUFDRSx1QkRIYztFQ0lkO0VBRUE7RUFDQTtFQUNBO0FQNktGO0FPMUtBO0VBQ0Usd0JEWGU7RUNZZjtFQUVBO0VBQ0E7RUFDQTtBUDJLRjtBT3hLQTtFQUNFLHdCRHBCZTtFQ3FCZjtFQUVBO0VBQ0E7RUFDQTtBUHlLRjtBT3RLQTtFQUNFLHdCRDdCZTtFQzhCZjtFQUVBO0VBQ0E7RUFDQTtBUHVLRjtBT3BLQTtFQUNFLHlCRHBDZ0I7RUNxQ2hCO0VBQ0E7RUFDQTtBUHNLRjtBUXROQTs7O0VBR0U7RUFDQTtFQUNBO0FSd05GOztBUXJOQTtFQU1FO0VBRUEsMkJBRUc7RUFDSDtFQUNBO0VBQ0E7QVJnTkY7QUlrV0k7RUkvakJKO0lBZUksMkJBRUc7RVJnTkw7QUFDRjs7QVE3TUE7RUFFRTtFQUlBO0FSNE1GOztBUTFNQTtFQUNNO0VBQ0U7RUFDQTtBUjZNUjs7QVExTUE7O0VBRUU7QVI2TUY7O0FRdk1BO0VBRUU7RUFDQTtBUnlNRjs7QVF2TUE7RUFDRTtFQUNBO0VBQ0E7QVIwTUY7O0FReE1BO0VBQ0U7RUFDQTtFQUNBO0FSMk1GO0FRek1FO0VBQ0U7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUVBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBUjBNSjs7QVF0TUE7RUFDRTtFQUNBO0FSeU1GOztBUXZNQTtFQUNFO0FSME1GOztBUXJNQTs7RUFFRTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBUndNRjs7QVFyTUE7QUFFQTtBQUVBO0VBQ0U7RUFDQTtFQUNBO0FSc01GOztBUW5NQTtFQUNFO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QVJzTUY7O0FRcE1BO0VBQ0U7RUFDQTtBUnVNRjs7QVFuTEU7OztFQUNFO0VBQ0E7RUFDQTtBUndMSjs7QVN6VUE7RUFHRTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBRUE7QVR5VUY7O0FTdFVBO0VBRUU7RUFDQTtBVHdVRjs7QVNyVUE7RUFDRSx3QkhYZTtFR2FmO0VBQ0E7RUFDQTtFQUNBO0FUdVVGOztBU3BVQTtFQUNFO0VBQ0E7QVR1VUY7O0FTbFRBO0VBQ0U7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QVRxVEY7O0FTbFRBO0VBQ0U7RUFDQTtFQUNBO0VBQ0E7QVRxVEY7O0FTbFRBO0VBQ0U7RUFDQTtBVHFURjs7QVNuVEE7RUFDRTtFQUNBO0FUc1RGOztBU25UQTtFQUNFO0VBQ0E7QVRzVEY7O0FTcFRBO0VBQ0U7RUFDQTtBVHVURjs7QVNwVEE7RUFDRTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0FUdVRGOztBU3JUQTtFQUNFO0VBQ0E7QVR3VEY7O0FTdFRBO0VBQ0U7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBVHlURjs7QVN0VEE7RUFDRTtFQUNBO0FUeVRGOztBU3ZUQTtFQUNFO0VBQ0E7QVQwVEY7O0FTdlRBO0VBQ0U7RUFDQTtBVDBURjs7QVN2VEE7RUFDRTtFQUNBO0FUMFRGOztBU3hUQTtFQUNFO0VBQ0E7QVQyVEY7O0FTeFRBO0VBQ0U7RUFDQTtBVDJURjs7QVN6VEE7RUFDRTtFQUNBO0VBQ0E7QVQ0VEY7O0FTelRBO0VBQ0U7RUFDQTtBVDRURjs7QVN6VEE7RUFDRTtFQUNBO0FUNFRGOztBUzFUQTtFQUNFO0VBQ0E7RUFDQTtBVDZURjs7QVMzVEE7RUFDRTtFQUNBO0VBQ0E7RUFDQTtBVDhURjs7QVM1VEE7RUFDRTtFQUNBO0FUK1RGOztBUzVUQTtFQUNFO0VBQ0E7QVQrVEY7O0FTN1RBO0VBQ0U7RUFDQTtFQUNBO0VBQ0E7QVRnVUY7O0FTN1RBO0VBQ0U7RUFDQTtBVGdVRjs7QVM3VEE7RUFDRTtFQUNBO0FUZ1VGOztBUzlUQTtFQUNFO0VBQ0E7QVRpVUY7O0FTOVRBO0VBQ0U7RUFDQTtBVGlVRjs7QVM5VEE7RUFDRTtFQUNBO0FUaVVGOztBUzlUQTtFQUNFO0VBQ0E7QVRpVUY7O0FTL1RBO0VBQ0U7RUFDQTtBVGtVRjs7QVMvVEE7RUFDRTtFQUNBO0FUa1VGOztBU2hVQTtFQUNFO0VBQ0E7RUFDQTtFQUNBO0FUbVVGOztBU2pVQTtFQUNFO0VBQ0E7RUFDQTtFQUNBO0FUb1VGOztBU2xVQTtFQUNFO0lBQ0U7RVRxVUYsRVNwVUU7RUFDRjtJQUNFO0VUcVVGLEVTcFVFO0VBQ0Y7SUFDRTtFVHFVRixFU3BVRTtFQUNGO0lBQ0U7RVRxVUYsRVNwVUU7QVRxVUo7QVNsVUE7RUFDRTtBVG9VRjs7QVNsVUE7RUFDRTtFQUNBO0FUcVVGOztBU25VQTtFQUNFO0VBQ0E7QVRzVUY7O0FTcFVBO0VBQ0U7RUFDQTtBVHVVRjs7QVNyVUE7RUFDRTtFQUNBO0FUd1VGOztBU3RVQTtFQUNFO0VBQ0E7QVR5VUY7O0FTdlVBO0VBQ0U7RUFDQTtBVDBVRjs7QVN4VUE7RUFDRTtFQUNBO0FUMlVGOztBU3pVQTtFQUNFO0VBQ0E7QVQ0VUY7O0FTMVVBO0VBQ0U7RUFDQTtBVDZVRjs7QVMzVUE7RUFDRTtFQUNBO0FUOFVGOztBUzVVQTtFQUNFO0VBQ0E7QVQrVUY7O0FVem1CQTtFQUVFO0VBRUE7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUVBO0VBRUEsdUJKTmM7QU44bUJoQjs7QVVybUJBO0VBQ0U7QVZ3bUJGOztBVXBtQkE7RUFDRTtFQUNBO0FWdW1CRjs7QVVwbUJBO0VBQ0U7QVZ1bUJGOztBV2pvQkE7RUFHRTtFQUNBLHdCTEllO0VLSGY7RUFFQTtFQUNBO0FYaW9CRjs7QVcvbkJBO0VBQ0U7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBWGtvQkY7QUk3RUk7RU83akJKO0lBVUk7RVhvb0JGO0FBQ0Y7O0FXbG9CQTtFQUNFO0VBQ0E7RUFDQTtBWHFvQkY7O0FXbm9CQTtFQUNFO0VBQ0E7RUFDQTtFQUNBO0VBRUE7RUFDQTtFQUNBO0FYcW9CRjtBSWxHSTtFTzNpQko7SUFVSTtFWHVvQkY7QUFDRjs7QVdwb0JBO0VBQ0U7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QVh1b0JGOztBV3BvQkE7RUFDRTtJQUNFO0VYdW9CRjtFV3JvQkE7SUFDRTtFWHVvQkY7QUFDRjtBVzNuQkE7RUFDRTtFQUNBO0VBQ0E7RUFFQTtBWDRuQkY7O0FXL21CQTtFQUNFO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBWGtuQkY7O0FXL21CQTtFQUNFO0FYa25CRjs7QVcvbUJBO0FBQ0E7RUFDRTtJQUNFO0VYa25CRjtFVzltQkE7SUFDRTtFWGduQkY7RVc3bUJBO0lBQ0U7RVgrbUJGO0FBQ0Y7QVc1bUJBO0VBQ0U7SUFDRTtFWDhtQkY7RVcxbUJBO0lBQ0U7RVg0bUJGO0VXeG1CQTtJQUNFO0VYMG1CRjtFV3ZtQkE7SUFDRTtFWHltQkY7QUFDRjtBV3RtQkE7QUFDQTs7RUFFRTtBWHdtQkY7O0FXcm1CQTs7RUFFRTtBWHdtQkY7O0FXcm1CQTs7RUFFRTtBWHdtQkY7O0FXcm1CQTs7RUFFRTtBWHdtQkY7O0FXcm1CQTs7RUFFRTtBWHdtQkY7O0FXcm1CQTs7RUFFRTtBWHdtQkY7O0FXdG1CQTs7RUFFRTtBWHltQkY7O0FXbm1CQTtFQUNFO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBWHNtQkY7QUlwTkk7RU94Wko7SUFRSTtFWHdtQkY7QUFDRjs7QVdybUJBO0VBQ0U7QVh3bUJGOztBV3BtQkE7RUFDRSx5Qkx4TGdCO0VLeUxoQjtFQUdBO0FYcW1CRjs7QVdobUJHO0VBRUQ7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QVhrbUJGOztBVzlsQkc7RUFDSyx3QkxsTlM7RUttTmI7RUFDSTtFQUNBO0FYaW1CUixDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVybWFubi8uL3N0eWxlcy9iYXNlL3Jlc2V0LnNjc3MiLCJ3ZWJwYWNrOi8vaGVybWFubi8uL3N0eWxlcy9pbmRleC5zY3NzIiwid2VicGFjazovL2hlcm1hbm4vLi9zdHlsZXMvdXRpbHMvbWl4aW5zLnNjc3MiLCJ3ZWJwYWNrOi8vaGVybWFubi8uL3N0eWxlcy91dGlscy92ZW5kb3JzLnNjc3MiLCJ3ZWJwYWNrOi8vaGVybWFubi8uL3N0eWxlcy9zaGFyZWQvZGVzY3JpcHRpb25zLnNjc3MiLCJ3ZWJwYWNrOi8vaGVybWFubi8uL25vZGVfbW9kdWxlcy9pbmNsdWRlLW1lZGlhL2Rpc3QvX2luY2x1ZGUtbWVkaWEuc2NzcyIsIndlYnBhY2s6Ly9oZXJtYW5uLy4vc3R5bGVzL3NoYXJlZC90aXRsZXMuc2NzcyIsIndlYnBhY2s6Ly9oZXJtYW5uLy4vc3R5bGVzL3V0aWxzL3ZhcmlhYmxlcy5zY3NzIiwid2VicGFjazovL2hlcm1hbm4vLi9zdHlsZXMvYmFzZS9mb250cy5zY3NzIiwid2VicGFjazovL2hlcm1hbm4vLi9zdHlsZXMvYmFzZS9iYXNlLnNjc3MiLCJ3ZWJwYWNrOi8vaGVybWFubi8uL3N0eWxlcy9jb21wb25lbnRzL3ByZWxvYWRlci5zY3NzIiwid2VicGFjazovL2hlcm1hbm4vLi9zdHlsZXMvbGF5b3V0L25hdmlnYXRpb24uc2NzcyIsIndlYnBhY2s6Ly9oZXJtYW5uLy4vc3R5bGVzL3BhZ2VzL2hvbWUvaG9tZS5zY3NzIl0sInNvdXJjZXNDb250ZW50IjpbImh0bWwsXHJcbmJvZHksXHJcbmRpdixcclxuc3BhbixcclxuYXBwbGV0LFxyXG5vYmplY3QsXHJcbmlmcmFtZSxcclxuaDEsXHJcbmgyLFxyXG5oMyxcclxuaDQsXHJcbmg1LFxyXG5oNixcclxucCxcclxuYmxvY2txdW90ZSxcclxucHJlLFxyXG5hLFxyXG5hYmJyLFxyXG5hY3JvbnltLFxyXG5hZGRyZXNzLFxyXG5iaWcsXHJcbmNpdGUsXHJcbmNvZGUsXHJcbmRlbCxcclxuZGZuLFxyXG5lbSxcclxuaW1nLFxyXG5pbnMsXHJcbmtiZCxcclxucSxcclxucyxcclxuc2FtcCxcclxuc21hbGwsXHJcbnN0cmlrZSxcclxuc3Ryb25nLFxyXG5zdWIsXHJcbnN1cCxcclxudHQsXHJcbnZhcixcclxuYixcclxudSxcclxuaSxcclxuY2VudGVyLFxyXG5kbCxcclxuZHQsXHJcbmRkLFxyXG5vbCxcclxudWwsXHJcbmxpLFxyXG5maWVsZHNldCxcclxuZm9ybSxcclxubGFiZWwsXHJcbmxlZ2VuZCxcclxudGFibGUsXHJcbmNhcHRpb24sXHJcbnRib2R5LFxyXG50Zm9vdCxcclxudGhlYWQsXHJcbnRyLFxyXG50aCxcclxudGQsXHJcbmFydGljbGUsXHJcbmFzaWRlLFxyXG5jYW52YXMsXHJcbmRldGFpbHMsXHJcbmVtYmVkLFxyXG5maWd1cmUsXHJcbmZpZ2NhcHRpb24sXHJcbmZvb3RlcixcclxuaGVhZGVyLFxyXG5oZ3JvdXAsXHJcbm1lbnUsXHJcbm5hdixcclxub3V0cHV0LFxyXG5ydWJ5LFxyXG5zZWN0aW9uLFxyXG5zdW1tYXJ5LFxyXG50aW1lLFxyXG5tYXJrLFxyXG5hdWRpbyxcclxudmlkZW8ge1xyXG4gIG1hcmdpbjogMDtcclxuICBwYWRkaW5nOiAwO1xyXG4gIGJvcmRlcjogMDtcclxuICBmb250LXNpemU6IDEwMCU7XHJcbiAgZm9udDogaW5oZXJpdDtcclxuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XHJcbn1cclxuXHJcbmFydGljbGUsXHJcbmFzaWRlLFxyXG5kZXRhaWxzLFxyXG5maWdjYXB0aW9uLFxyXG5maWd1cmUsXHJcbmZvb3RlcixcclxuaGVhZGVyLFxyXG5oZ3JvdXAsXHJcbm1lbnUsXHJcbm5hdixcclxuc2VjdGlvbiB7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbn1cclxuXHJcbmJvZHkge1xyXG4gIGxpbmUtaGVpZ2h0OiAxO1xyXG59XHJcblxyXG5vbCxcclxudWwge1xyXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XHJcbn1cclxuXHJcbmJsb2NrcXVvdGUsXHJcbnEge1xyXG4gIHF1b3Rlczogbm9uZTtcclxufVxyXG5cclxuYmxvY2txdW90ZTpiZWZvcmUsXHJcbmJsb2NrcXVvdGU6YWZ0ZXIsXHJcbnE6YmVmb3JlLFxyXG5xOmFmdGVyIHtcclxuICBjb250ZW50OiBcIlwiO1xyXG4gIGNvbnRlbnQ6IG5vbmU7XHJcbn1cclxuXHJcbnRhYmxlIHtcclxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xyXG4gIGJvcmRlci1zcGFjaW5nOiAwO1xyXG59XHJcbiIsImh0bWwsXG5ib2R5LFxuZGl2LFxuc3BhbixcbmFwcGxldCxcbm9iamVjdCxcbmlmcmFtZSxcbmgxLFxuaDIsXG5oMyxcbmg0LFxuaDUsXG5oNixcbnAsXG5ibG9ja3F1b3RlLFxucHJlLFxuYSxcbmFiYnIsXG5hY3JvbnltLFxuYWRkcmVzcyxcbmJpZyxcbmNpdGUsXG5jb2RlLFxuZGVsLFxuZGZuLFxuZW0sXG5pbWcsXG5pbnMsXG5rYmQsXG5xLFxucyxcbnNhbXAsXG5zbWFsbCxcbnN0cmlrZSxcbnN0cm9uZyxcbnN1YixcbnN1cCxcbnR0LFxudmFyLFxuYixcbnUsXG5pLFxuY2VudGVyLFxuZGwsXG5kdCxcbmRkLFxub2wsXG51bCxcbmxpLFxuZmllbGRzZXQsXG5mb3JtLFxubGFiZWwsXG5sZWdlbmQsXG50YWJsZSxcbmNhcHRpb24sXG50Ym9keSxcbnRmb290LFxudGhlYWQsXG50cixcbnRoLFxudGQsXG5hcnRpY2xlLFxuYXNpZGUsXG5jYW52YXMsXG5kZXRhaWxzLFxuZW1iZWQsXG5maWd1cmUsXG5maWdjYXB0aW9uLFxuZm9vdGVyLFxuaGVhZGVyLFxuaGdyb3VwLFxubWVudSxcbm5hdixcbm91dHB1dCxcbnJ1YnksXG5zZWN0aW9uLFxuc3VtbWFyeSxcbnRpbWUsXG5tYXJrLFxuYXVkaW8sXG52aWRlbyB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgYm9yZGVyOiAwO1xuICBmb250LXNpemU6IDEwMCU7XG4gIGZvbnQ6IGluaGVyaXQ7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbn1cblxuYXJ0aWNsZSxcbmFzaWRlLFxuZGV0YWlscyxcbmZpZ2NhcHRpb24sXG5maWd1cmUsXG5mb290ZXIsXG5oZWFkZXIsXG5oZ3JvdXAsXG5tZW51LFxubmF2LFxuc2VjdGlvbiB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG5ib2R5IHtcbiAgbGluZS1oZWlnaHQ6IDE7XG59XG5cbm9sLFxudWwge1xuICBsaXN0LXN0eWxlOiBub25lO1xufVxuXG5ibG9ja3F1b3RlLFxucSB7XG4gIHF1b3Rlczogbm9uZTtcbn1cblxuYmxvY2txdW90ZTpiZWZvcmUsXG5ibG9ja3F1b3RlOmFmdGVyLFxucTpiZWZvcmUsXG5xOmFmdGVyIHtcbiAgY29udGVudDogXCJcIjtcbiAgY29udGVudDogbm9uZTtcbn1cblxudGFibGUge1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICBib3JkZXItc3BhY2luZzogMDtcbn1cblxuLmdhbGxlcnlfX2RldGFpbHMsIC5jb250YWN0LCAuZGV0YWlscywgLm5hdmlnYXRpb24sIC5vdmVybGF5LCAucHJlbG9hZGVyLCAuY29udGVudF9fbW92ZSwgLmNvbnRlbnRfX3JvdGF0ZSxcbi5jb250ZW50X19yZXZlcnNlLCBib2R5LCBodG1sLCAuaG9tZSB7XG4gIGhlaWdodDogMTAwJTtcbiAgbGVmdDogMDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4uY29udGFjdCwgLmRldGFpbHMsIC5wcmVsb2FkZXIge1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn1cblxuLmRnLmFjIHtcbiAgei1pbmRleDogOTk5OTkgIWltcG9ydGFudDtcbn1cblxuLmdhbGxlcnlfX2RldGFpbHNfX3BhcmFncmFwaCB7XG4gIGZvbnQtc2l6ZTogMS42cmVtO1xuICBmb250LXdlaWdodDogMzAwO1xuICBsaW5lLWhlaWdodDogMS41O1xufVxuQG1lZGlhIChtYXgtd2lkdGg6IDc2N3B4KSB7XG4gIC5nYWxsZXJ5X19kZXRhaWxzX19wYXJhZ3JhcGgge1xuICAgIGZvbnQtc2l6ZTogMi44cmVtO1xuICB9XG59XG5cbi5uYXZpZ2F0aW9uX19saXN0X19saW5rLCAubmF2aWdhdGlvbl9fbGluayB7XG4gIGZvbnQtZmFtaWx5OiBcIkdlb3JnZSBYXCI7XG4gIGZvbnQtc2l6ZTogMnJlbTtcbn1cbkBtZWRpYSAobWF4LXdpZHRoOiA3NjdweCkge1xuICAubmF2aWdhdGlvbl9fbGlzdF9fbGluaywgLm5hdmlnYXRpb25fX2xpbmsge1xuICAgIGZvbnQtc2l6ZTogM3JlbTtcbiAgfVxufVxuXG4uZ2FsbGVyeV9fZGV0YWlsc19fdGl0bGUge1xuICBmb250LWZhbWlseTogXCJHZW9yZ2UgWFwiO1xuICBmb250LXNpemU6IDhyZW07XG59XG5cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJibG93YnJ1c2hcIjtcbiAgc3JjOiB1cmwoXCIuLi9mb250cy9ibG93YnJ1c2gub3RmXCIpIGZvcm1hdChcIm9wZW50eXBlXCIpLCB1cmwoXCIuLi9mb250cy9ibG93YnJ1c2gudHRmXCIpIGZvcm1hdChcInRydWV0eXBlXCIpO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG59XG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiR2VvcmdlIFhcIjtcbiAgc3JjOiB1cmwoXCIuLi9mb250cy9nZW9yZ2UteC1yZWd1bGFyLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCIuLi9mb250cy9nZW9yZ2UteC1yZWd1bGFyLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiU3Vpc3NlIEJQXCI7XG4gIHNyYzogdXJsKFwiLi4vZm9udHMvc3Vpc3NlLWJwLXJlZ3VsYXIud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcIi4uL2ZvbnRzL3N1aXNzZS1icC1yZWd1bGFyLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiU3Vpc3NlIEJQXCI7XG4gIHNyYzogdXJsKFwiLi4vZm9udHMvc3Vpc3NlLWJwLWxpZ2h0LndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCIuLi9mb250cy9zdWlzc2UtYnAtbGlnaHQud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xuICBmb250LXdlaWdodDogMzAwO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbn1cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJTdWlzc2UgQlBcIjtcbiAgc3JjOiB1cmwoXCIuLi9mb250cy9zdWlzc2UtYnAtdWx0cmEtbGlnaHQud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcIi4uL2ZvbnRzL3N1aXNzZS1icC11bHRyYS1saWdodC53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiAyMDA7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIk1vbnRzZXJyYXRcIjtcbiAgc3JjOiB1cmwoXCIuLi9mb250cy9tb250c2VycmF0LnR0ZlwiKSBmb3JtYXQoXCJ0cnVldHlwZVwiKTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xufVxuKixcbio6YWZ0ZXIsXG4qOmJlZm9yZSB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHVzZXItc2VsZWN0OiBub25lO1xuICBjdXJzb3I6IG5vbmU7XG59XG5cbmh0bWwge1xuICBjdXJzb3I6IG5vbmU7XG4gIGZvbnQtc2l6ZTogMC41MjA4MzMzMzMzdnc7IC8qIFNldCBiYXNlIGZvbnQgc2l6ZSBieSB2aWV3cG9ydCB3aWR0aCBmb3Igc3RhbmRhcmQgcmVzb2x1dGlvbiAqL1xuICBsaW5lLWhlaWdodDogMTtcbiAgcG9zaXRpb246IGZpeGVkO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuQG1lZGlhIChtYXgtd2lkdGg6IDc2N3B4KSB7XG4gIGh0bWwge1xuICAgIGZvbnQtc2l6ZTogMS4zMzMzMzMzMzMzdnc7IC8qIEFkanVzdCBmb250IHNpemUgZm9yIHBob25lIHNjcmVlbiByZXNvbHV0aW9ucyAqL1xuICB9XG59XG5cbmJvZHkge1xuICBjdXJzb3I6IG5vbmU7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbn1cblxuLmNvbnRlbnQge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuLmNvbnRlbnRfX3JvdGF0ZSxcbi5jb250ZW50X19yZXZlcnNlIHtcbiAgd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybTtcbn1cblxuLmNvbnRlbnRfX21vdmUge1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1xufVxuXG4uY3Vyc29yLWRvdCB7XG4gIHdpZHRoOiA1cHg7XG4gIGhlaWdodDogNXB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDIwJSk7XG59XG5cbi5jdXJzb3Itb3V0bGluZSB7XG4gIHdpZHRoOiAzMHB4O1xuICBoZWlnaHQ6IDMwcHg7XG4gIGJvcmRlcjogMnB4IHNvbGlkIGhzbCg3OCwgMTAwJSwgNDAlKTtcbn1cbi5jdXJzb3Itb3V0bGluZTo6YWZ0ZXIge1xuICBjb250ZW50OiBhdHRyKGRhdGEtbGFiZWwpO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogLTEwcHg7XG4gIGxlZnQ6IDUwcHg7XG4gIHBhZGRpbmc6IDVweCAxMHB4O1xuICBjb2xvcjogaHNsKDc4LCAxMDAlLCAxNSUpO1xuICBmb250LXNpemU6IDE2cHg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgZGlzcGxheTogbm9uZTtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG5cbi5pbWFnZS1ob3Zlci5jdXJzb3Itb3V0bGluZSB7XG4gIGJhY2tncm91bmQtY29sb3I6IGhzbGEoNzgsIDEwMCUsIDkwJSwgMC42KTtcbiAgYm9yZGVyOiBub25lO1xufVxuXG4uY3Vyc29yLW91dGxpbmUuaW1hZ2UtaG92ZXI6OmFmdGVyIHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbi5jdXJzb3ItZG90LFxuLmN1cnNvci1vdXRsaW5lIHtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIHotaW5kZXg6IDk5OTk5OTtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG5cbi8qIFBzZXVkby1lbGVtZW50IGZvciB0aGUgbGFiZWwgbmV4dCB0byB0aGUgY3Vyc29yICovXG4vKiBTaG93IHRoZSBsYWJlbCB3aGVuIGhvdmVyaW5nIG92ZXIgYW4gaW1hZ2UgKi9cbmEge1xuICBjb2xvcjogaW5oZXJpdDtcbiAgb3V0bGluZTogbm9uZTtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xufVxuXG5idXR0b24ge1xuICBiYWNrZ3JvdW5kOiBub25lO1xuICBib3JkZXI6IG5vbmU7XG4gIGNvbG9yOiBpbmhlcml0O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIG91dGxpbmU6IG5vbmU7XG59XG5cbmNhbnZhcyB7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbltkYXRhLWFuaW1hdGlvbj10aXRsZV0gc3BhbixcbltkYXRhLWFuaW1hdGlvbj1sYWJlbF0gc3BhbixcbltkYXRhLWFuaW1hdGlvbj1wYXJhZ3JhcGhdIHNwYW4ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XG59XG5cbi5wcmVsb2FkZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBnYXA6IDNyZW07XG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAxJSwgMjclKTtcbiAgY29sb3I6IGhzbCg3OCwgMTAwJSwgNDUlKTtcbiAgei1pbmRleDogMztcbn1cblxuLm92ZXJsYXkge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2xhKDAsIDAlLCAwJSwgMC43NSk7XG4gIHotaW5kZXg6IDQ7XG59XG5cbi5wcmVsb2FkZXJfX3RleHQge1xuICBmb250LWZhbWlseTogXCJibG93YnJ1c2hcIjtcbiAgZm9udC1zaXplOiA2LjVyZW07XG4gIG1heC13aWR0aDogNjZyZW07XG4gIHotaW5kZXg6IDY3NztcbiAgdGV4dC1zaGFkb3c6IDAgMCA1MHB4IGhzbGEoMCwgMCUsIDAlLCAwLjQpO1xufVxuXG4ucHJlbG9hZGVyX19udW1iZXIge1xuICBmb250LXNpemU6IDJyZW07XG4gIHotaW5kZXg6IDY3Nztcbn1cblxuLmZyYW1lIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB3aWR0aDogMTAwJTsgLyogQWRqdXN0IGFzIG5lZWRlZCAqL1xuICBoZWlnaHQ6IDEwMCU7IC8qIEFkanVzdCBhcyBuZWVkZWQgKi9cbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICBvcGFjaXR5OiAwOyAvKiBTdGFydCB3aXRoIGZyYW1lcyBoaWRkZW4gKi9cbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjVzIGVhc2UtaW47IC8qIFNtb290aCB0cmFuc2l0aW9uIGJldHdlZW4gZnJhbWVzICovXG59XG5cbi5mcmFtZSBpbWcge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yMDgpO1xuICBvcGFjaXR5OiAxO1xuICBoZWlnaHQ6IDEwMCU7XG59XG5cbi5mcmFtZTEgLmltZzEge1xuICB0b3A6IDA7XG4gIGxlZnQ6IDUwdnc7XG59XG5cbi5mcmFtZTEgLmltZzIge1xuICB0b3A6IDA7XG4gIHJpZ2h0OiA1MHZ3O1xufVxuXG4uZnJhbWUyIC5pbWcxIHtcbiAgdG9wOiAwO1xuICBsZWZ0OiA1MHZ3O1xufVxuXG4uZnJhbWUyIC5pbWcyIHtcbiAgdG9wOiAwO1xuICByaWdodDogNTB2dztcbn1cblxuLmZyYW1lMyAuaW1nMSB7XG4gIHRvcDogNTAlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gIGxlZnQ6IDUwdnc7XG4gIHdpZHRoOiA1MDBweDtcbiAgaGVpZ2h0OiA1MDBweDtcbn1cblxuLmZyYW1lMyAuaW1nMiB7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDUwdnc7XG59XG5cbi5mcmFtZTQgLmltZzEge1xuICB0b3A6IDA7XG4gIHJpZ2h0OiA1MHZ3O1xuICB3aWR0aDogNDAwcHg7XG4gIGhlaWdodDogNDAwcHg7XG4gIHotaW5kZXg6IDY7XG59XG5cbi5mcmFtZTQgLmltZzIge1xuICB0b3A6IDA7XG4gIHJpZ2h0OiA1MHZ3O1xufVxuXG4uZnJhbWU0IC5pbWczIHtcbiAgdG9wOiAwO1xuICBsZWZ0OiA1MHZ3O1xufVxuXG4uZnJhbWU1IC5pbWcxIHtcbiAgdG9wOiAwO1xuICBsZWZ0OiA1MHZ3O1xufVxuXG4uZnJhbWU1IC5pbWcyIHtcbiAgdG9wOiAwO1xuICByaWdodDogNTB2dztcbn1cblxuLmZyYW1lNiAuaW1nMSB7XG4gIHRvcDogMDtcbiAgbGVmdDogNTB2dztcbn1cblxuLmZyYW1lNiAuaW1nMiB7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDUwdnc7XG59XG5cbi5mcmFtZTYgLmltZzMge1xuICBib3R0b206IDA7XG4gIGxlZnQ6IDUwdnc7XG4gIGhlaWdodDogNjAlO1xufVxuXG4uZnJhbWU3IC5pbWcxIHtcbiAgdG9wOiAwO1xuICBsZWZ0OiA1MHZ3O1xufVxuXG4uZnJhbWU3IC5pbWcyIHtcbiAgdG9wOiAwO1xuICByaWdodDogNTB2dztcbn1cblxuLmZyYW1lNyAuaW1nMyB7XG4gIGJvdHRvbTogMjBweDtcbiAgbGVmdDogNTB2dztcbiAgaGVpZ2h0OiA2MCU7XG59XG5cbi5mcmFtZTcgLmltZzQge1xuICB0b3A6IDQwcHg7XG4gIHJpZ2h0OiA1MHZ3O1xuICBoZWlnaHQ6IDU1MHB4O1xuICB3aWR0aDogNTAwcHg7XG59XG5cbi5mcmFtZTggLmltZzEge1xuICB0b3A6IDA7XG4gIGxlZnQ6IDUwdnc7XG59XG5cbi5mcmFtZTggLmltZzIge1xuICB0b3A6IDA7XG4gIHJpZ2h0OiA1MHZ3O1xufVxuXG4uZnJhbWU4IC5pbWczIHtcbiAgdG9wOiA0MHB4O1xuICByaWdodDogNTB2dztcbiAgaGVpZ2h0OiA1NTBweDtcbiAgd2lkdGg6IDUwMHB4O1xufVxuXG4uZnJhbWU5IC5pbWcxIHtcbiAgdG9wOiAwO1xuICBsZWZ0OiA1MHZ3O1xufVxuXG4uZnJhbWU5IC5pbWcyIHtcbiAgdG9wOiAwO1xuICByaWdodDogNTB2dztcbn1cblxuLmZyYW1lMTAgLmltZzEge1xuICB0b3A6IDA7XG4gIGxlZnQ6IDUwdnc7XG59XG5cbi5mcmFtZTEwIC5pbWcyIHtcbiAgdG9wOiAwO1xuICByaWdodDogNTB2dztcbn1cblxuLmZyYW1lMTEgLmltZzEge1xuICB0b3A6IDA7XG4gIGxlZnQ6IDUwdnc7XG59XG5cbi5mcmFtZTExIC5pbWcyIHtcbiAgdG9wOiAwO1xuICByaWdodDogNTB2dztcbn1cblxuLmZyYW1lMTIgLmltZzEge1xuICB0b3A6IDA7XG4gIGxlZnQ6IDUwdnc7XG59XG5cbi5mcmFtZTEyIC5pbWcyIHtcbiAgdG9wOiAwO1xuICByaWdodDogNTB2dztcbn1cblxuLmZyYW1lMTIgLmltZzMge1xuICB0b3A6IDA7XG4gIHJpZ2h0OiA1MHZ3O1xuICBoZWlnaHQ6IDU1MHB4O1xuICB3aWR0aDogNTAwcHg7XG59XG5cbi5mcmFtZTEyIC5pbWc0IHtcbiAgYm90dG9tOiAwO1xuICBsZWZ0OiA1MHZ3O1xuICBoZWlnaHQ6IDU1MHB4O1xuICB3aWR0aDogNTAwcHg7XG59XG5cbkBrZXlmcmFtZXMgc3dpdGNoRnJhbWVzIHtcbiAgMCUge1xuICAgIG9wYWNpdHk6IDE7XG4gIH0gLyogRnJhbWUgaXMgdmlzaWJsZSAqL1xuICA4LjMzJSB7XG4gICAgb3BhY2l0eTogMTtcbiAgfSAvKiBNYWludGFpbiB2aXNpYmlsaXR5ICovXG4gIDguMzQlIHtcbiAgICBvcGFjaXR5OiAwO1xuICB9IC8qIFN0YXJ0IGZhZGluZyBvdXQgKi9cbiAgMTAwJSB7XG4gICAgb3BhY2l0eTogMDtcbiAgfSAvKiBSZW1haW4gaGlkZGVuICovXG59XG4uZnJhbWUxIHtcbiAgYW5pbWF0aW9uOiBzd2l0Y2hGcmFtZXMgNnMgaW5maW5pdGU7XG59XG5cbi5mcmFtZTIge1xuICBhbmltYXRpb246IHN3aXRjaEZyYW1lcyA2cyBpbmZpbml0ZTtcbiAgYW5pbWF0aW9uLWRlbGF5OiAwLjVzO1xufVxuXG4uZnJhbWUzIHtcbiAgYW5pbWF0aW9uOiBzd2l0Y2hGcmFtZXMgNnMgaW5maW5pdGU7XG4gIGFuaW1hdGlvbi1kZWxheTogMXM7XG59XG5cbi5mcmFtZTQge1xuICBhbmltYXRpb246IHN3aXRjaEZyYW1lcyA2cyBpbmZpbml0ZTtcbiAgYW5pbWF0aW9uLWRlbGF5OiAxLjVzO1xufVxuXG4uZnJhbWU1IHtcbiAgYW5pbWF0aW9uOiBzd2l0Y2hGcmFtZXMgNnMgaW5maW5pdGU7XG4gIGFuaW1hdGlvbi1kZWxheTogMnM7XG59XG5cbi5mcmFtZTYge1xuICBhbmltYXRpb246IHN3aXRjaEZyYW1lcyA2cyBpbmZpbml0ZTtcbiAgYW5pbWF0aW9uLWRlbGF5OiAyLjVzO1xufVxuXG4uZnJhbWU3IHtcbiAgYW5pbWF0aW9uOiBzd2l0Y2hGcmFtZXMgNnMgaW5maW5pdGU7XG4gIGFuaW1hdGlvbi1kZWxheTogM3M7XG59XG5cbi5mcmFtZTgge1xuICBhbmltYXRpb246IHN3aXRjaEZyYW1lcyA2cyBpbmZpbml0ZTtcbiAgYW5pbWF0aW9uLWRlbGF5OiAzLjVzO1xufVxuXG4uZnJhbWU5IHtcbiAgYW5pbWF0aW9uOiBzd2l0Y2hGcmFtZXMgNnMgaW5maW5pdGU7XG4gIGFuaW1hdGlvbi1kZWxheTogNHM7XG59XG5cbi5mcmFtZTEwIHtcbiAgYW5pbWF0aW9uOiBzd2l0Y2hGcmFtZXMgNnMgaW5maW5pdGU7XG4gIGFuaW1hdGlvbi1kZWxheTogNC41cztcbn1cblxuLmZyYW1lMTEge1xuICBhbmltYXRpb246IHN3aXRjaEZyYW1lcyA2cyBpbmZpbml0ZTtcbiAgYW5pbWF0aW9uLWRlbGF5OiA1cztcbn1cblxuLmZyYW1lMTIge1xuICBhbmltYXRpb246IHN3aXRjaEZyYW1lcyA2cyBpbmZpbml0ZTtcbiAgYW5pbWF0aW9uLWRlbGF5OiA1LjVzO1xufVxuXG4ubmF2aWdhdGlvbiB7XG4gIGhlaWdodDogbWF4LWNvbnRlbnQ7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgcGFkZGluZzogMnJlbSA0cmVtO1xuICB6LWluZGV4OiAyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIGNvbG9yOiBoc2woNzgsIDEwMCUsIDE1JSk7XG4gIGZvbnQtZmFtaWx5OiBcIkdlb3JnZSBYXCI7XG59XG5cbi5uYXZpZ2F0aW9uX19saW5rIHtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xufVxuXG4ubmF2aWdhdGlvbl9fbGlzdCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogNHJlbTtcbn1cblxuLm5hdmlnYXRpb25fX2xpc3RfX2xpbmsge1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG59XG5cbi5ob21lIHtcbiAgcGFkZGluZy10b3A6IDdyZW07XG4gIGZvbnQtZmFtaWx5OiBcImJsb3dicnVzaFwiO1xuICBmb250LXNpemU6IDNyZW07XG4gIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7XG4gIGNvbG9yOiAjNDQ0NDQ0O1xufVxuXG4uZ2FsbGVyaWVzIHtcbiAgZm9udC1mYW1pbHk6IFwiYmxvd2JydXNoXCI7XG4gIGNvbG9yOiBoc2woNzgsIDEwMCUsIDE1JSk7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogNTAlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG4gIHRvcDogNHJlbTtcbiAgei1pbmRleDogMjtcbiAgZm9udC1zaXplOiA2cmVtO1xufVxuQG1lZGlhIChtYXgtd2lkdGg6IDc2N3B4KSB7XG4gIC5nYWxsZXJpZXMge1xuICAgIHRvcDogMTdyZW07XG4gIH1cbn1cblxuLmJveCB7XG4gIHdpZHRoOiAxMDB2dztcbiAgaGVpZ2h0OiAxMDB2aDtcbiAgYmFja2dyb3VuZC1jb2xvcjogcHVycGxlO1xufVxuXG4uYmFubmVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB6LWluZGV4OiAxO1xuICBtYXJnaW4tdG9wOiAxMHZoO1xuICB3aWR0aDogMTAwJTtcbiAgZGlzcGxheTogZ3JpZDtcbiAganVzdGlmeS1pdGVtczogY2VudGVyO1xuICBoZWlnaHQ6IDEwMHZoO1xufVxuQG1lZGlhIChtYXgtd2lkdGg6IDc2N3B4KSB7XG4gIC5iYW5uZXIge1xuICAgIG1hcmdpbi10b3A6IDE4dmg7XG4gIH1cbn1cblxuLmJhbm5lciAuc2xpZGVyIHtcbiAgdG9wOiAwO1xuICB3aWR0aDogMjB2dztcbiAgbWF4LXdpZHRoOiAxNzBweDtcbiAgYXNwZWN0LXJhdGlvOiAzLzQ7XG4gIHRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2Q7XG4gIHRyYW5zZm9ybTogcGVyc3BlY3RpdmUoMTAwMHB4KTsgLyogRW5zdXJlIGl0J3MgaG9yaXpvbnRhbGx5IGNlbnRlcmVkICovXG4gIGFuaW1hdGlvbjogYXV0b1J1biA0MnMgbGluZWFyIGluZmluaXRlO1xufVxuXG5Aa2V5ZnJhbWVzIGF1dG9SdW4ge1xuICBmcm9tIHtcbiAgICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDEwMDBweCkgcm90YXRlWCgtMTZkZWcpIHJvdGF0ZVkoMGRlZyk7XG4gIH1cbiAgdG8ge1xuICAgIHRyYW5zZm9ybTogcGVyc3BlY3RpdmUoMTAwMHB4KSByb3RhdGVYKC0xNmRlZykgcm90YXRlWSgzNjBkZWcpO1xuICB9XG59XG4uYmFubmVyIC5zbGlkZXIgLml0ZW0ge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGluc2V0OiAwIDAgMCAwO1xuICB0cmFuc2Zvcm06IHJvdGF0ZVkoY2FsYyh2YXIoLS1wb3NpdGlvbikgKiAzNjAgLyB2YXIoLS1xdWFudGl0eSkgKiAtMWRlZykpIHRyYW5zbGF0ZVoobWluKDM4dncsIDQ4MHB4KSk7XG4gIHRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2Q7XG59XG5cbi5pdGVtIGltZyB7XG4gIGZpbHRlcjogZ3JheXNjYWxlKDEwMCUpO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBvYmplY3QtZml0OiBjb3ZlcjtcbiAgYW5pbWF0aW9uOiBncmF5c2NhbGVFZmZlY3QgNDJzIGluZmluaXRlO1xuICB6LWluZGV4OiAxO1xufVxuXG4uaW4tdmlldyBpbWcge1xuICBmaWx0ZXI6IGdyYXlzY2FsZSgwJSk7XG59XG5cbi8qIEtleWZyYW1lcyB0byBjb250cm9sIHRoZSBncmF5c2NhbGUgcmVtb3ZhbCBiYXNlZCBvbiB0aW1lICovXG5Aa2V5ZnJhbWVzIGdyYXlzY2FsZUVmZmVjdCB7XG4gIDIwJSB7XG4gICAgZmlsdGVyOiBncmF5c2NhbGUoMCUpO1xuICB9XG4gIDcwJSB7XG4gICAgZmlsdGVyOiBncmF5c2NhbGUoMTAwJSk7XG4gIH1cbiAgMTAwJSB7XG4gICAgZmlsdGVyOiBncmF5c2NhbGUoMTAwJSk7XG4gIH1cbn1cbkBrZXlmcmFtZXMgb3BhY2l0eUVmZmVjdCB7XG4gIDQlIHtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG4gIDEyJSB7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxuICAyMiUge1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cbiAgMTAwJSB7XG4gICAgb3BhY2l0eTogMDtcbiAgfVxufVxuLyogRm9yIGVhY2ggaXRlbSwgZGVsYXkgdGhlIGFuaW1hdGlvbiBieSAzcyBpbmNyZW1lbnRhbGx5ICovXG4uYmFubmVyIC5zbGlkZXIgLml0ZW06bnRoLWNoaWxkKDEpIGltZyxcbi5nYWxsZXJ5X19kZXRhaWxzIC5nYWxsZXJ5X19kZXRhaWxzX19pdGVtOm50aC1jaGlsZCgxKSB7XG4gIGFuaW1hdGlvbi1kZWxheTogMHM7IC8qIFN0YXJ0IGltbWVkaWF0ZWx5ICovXG59XG5cbi5iYW5uZXIgLnNsaWRlciAuaXRlbTpudGgtY2hpbGQoMikgaW1nLFxuLmdhbGxlcnlfX2RldGFpbHMgLmdhbGxlcnlfX2RldGFpbHNfX2l0ZW06bnRoLWNoaWxkKDIpIHtcbiAgYW5pbWF0aW9uLWRlbGF5OiA2czsgLyogRGVsYXkgYnkgMyBzZWNvbmRzICovXG59XG5cbi5iYW5uZXIgLnNsaWRlciAuaXRlbTpudGgtY2hpbGQoMykgaW1nLFxuLmdhbGxlcnlfX2RldGFpbHMgLmdhbGxlcnlfX2RldGFpbHNfX2l0ZW06bnRoLWNoaWxkKDMpIHtcbiAgYW5pbWF0aW9uLWRlbGF5OiAxMnM7IC8qIERlbGF5IGJ5IDYgc2Vjb25kcyAqL1xufVxuXG4uYmFubmVyIC5zbGlkZXIgLml0ZW06bnRoLWNoaWxkKDQpIGltZyxcbi5nYWxsZXJ5X19kZXRhaWxzIC5nYWxsZXJ5X19kZXRhaWxzX19pdGVtOm50aC1jaGlsZCg0KSB7XG4gIGFuaW1hdGlvbi1kZWxheTogMThzOyAvKiBEZWxheSBieSA5IHNlY29uZHMgKi9cbn1cblxuLmJhbm5lciAuc2xpZGVyIC5pdGVtOm50aC1jaGlsZCg1KSBpbWcsXG4uZ2FsbGVyeV9fZGV0YWlscyAuZ2FsbGVyeV9fZGV0YWlsc19faXRlbTpudGgtY2hpbGQoNSkge1xuICBhbmltYXRpb24tZGVsYXk6IDI0czsgLyogRGVsYXkgYnkgMTIgc2Vjb25kcyAqL1xufVxuXG4uYmFubmVyIC5zbGlkZXIgLml0ZW06bnRoLWNoaWxkKDYpIGltZyxcbi5nYWxsZXJ5X19kZXRhaWxzIC5nYWxsZXJ5X19kZXRhaWxzX19pdGVtOm50aC1jaGlsZCg2KSB7XG4gIGFuaW1hdGlvbi1kZWxheTogMzBzOyAvKiBEZWxheSBieSAxNSBzZWNvbmRzICovXG59XG5cbi5iYW5uZXIgLnNsaWRlciAuaXRlbTpudGgtY2hpbGQoNykgaW1nLFxuLmdhbGxlcnlfX2RldGFpbHMgLmdhbGxlcnlfX2RldGFpbHNfX2l0ZW06bnRoLWNoaWxkKDcpIHtcbiAgYW5pbWF0aW9uLWRlbGF5OiAzNnM7IC8qIERlbGF5IGJ5IDE1IHNlY29uZHMgKi9cbn1cblxuLmdhbGxlcnlfX2RldGFpbHNfX2l0ZW0ge1xuICBvcGFjaXR5OiAwO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogNzB2aDtcbiAgbGVmdDogOHJlbTtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAxLjVzIGVhc2UtaW47XG4gIGFuaW1hdGlvbjogb3BhY2l0eUVmZmVjdCA0MnMgaW5maW5pdGU7XG59XG5AbWVkaWEgKG1heC13aWR0aDogNzY3cHgpIHtcbiAgLmdhbGxlcnlfX2RldGFpbHNfX2l0ZW0ge1xuICAgIHRvcDogNjB2aDtcbiAgfVxufVxuXG4uZ2FsbGVyeV9fZGV0YWlsc19fdGl0bGUge1xuICBjb2xvcjogaHNsKDc4LCAxMDAlLCAxNSUpO1xufVxuXG4uZ2FsbGVyeV9fZGV0YWlsc19fcGFyYWdyYXBoIHtcbiAgZm9udC1mYW1pbHk6IFwiTW9udHNlcnJhdFwiO1xuICBtYXJnaW4tdG9wOiAycmVtO1xuICBtYXgtd2lkdGg6IDQ0cmVtO1xufVxuXG4uaG9tZV9fcmV2ZWFsZXIge1xuICB3aWR0aDogMzAwdmg7XG4gIGhlaWdodDogMzAwdmg7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgei1pbmRleDogMTA7XG4gIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgMzAwdmgpIHJvdGF0ZSgxNmRlZyk7XG4gIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07XG59XG5cbi5ob21lX19yZXZlYWxlcl9fdGV4dCB7XG4gIGZvbnQtZmFtaWx5OiBcImJsb3dicnVzaFwiO1xuICBjb2xvcjogaHNsKDc4LCAxMDAlLCA1NSUpO1xuICBmb250LXNpemU6IDYuNXJlbTtcbiAgd2lsbC1jaGFuZ2U6IG9wYWNpdHk7XG59IiwiJWNvdmVyIHtcclxuICBoZWlnaHQ6IDEwMCU7XHJcbiAgbGVmdDogMDtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgdG9wOiAwO1xyXG4gIHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG4lY2VudGVyIHtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbn1cclxuIiwiLmRnLmFjIHtcclxuICB6LWluZGV4OiA5OTk5OSAhaW1wb3J0YW50O1xyXG59XHJcbiIsIiVkZXNjcmlwdGlvbi0xMiB7XHJcbiAgZm9udC1zaXplOiAxLjJyZW07XHJcblxyXG4gIEBpbmNsdWRlIG1lZGlhKCc8cGhvbmUnKSB7XHJcbiAgICBmb250LXNpemU6IDNyZW07XHJcbiAgfVxyXG59XHJcblxyXG4lZGVzY3JpcHRpb24tMTQge1xyXG4gIGZvbnQtc2l6ZTogMS40cmVtO1xyXG5cclxuICBAaW5jbHVkZSBtZWRpYSgnPHBob25lJykge1xyXG4gICAgZm9udC1zaXplOiAzcmVtO1xyXG4gIH1cclxufVxyXG5cclxuJWRlc2NyaXB0aW9uLTE2IHtcclxuICBmb250LXNpemU6IDEuNnJlbTtcclxuICBmb250LXdlaWdodDogMzAwO1xyXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XHJcblxyXG4gIEBpbmNsdWRlIG1lZGlhKCc8cGhvbmUnKSB7XHJcbiAgICBmb250LXNpemU6IDIuOHJlbTtcclxuICB9XHJcbn1cclxuIiwiLy8gICAgIF8gICAgICAgICAgICBfICAgICAgICAgICBfICAgICAgICAgICAgICAgICAgICAgICAgICAgXyBfXG4vLyAgICAoXykgICAgICAgICAgfCB8ICAgICAgICAgfCB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgKF8pXG4vLyAgICAgXyBfIF9fICAgX19ffCB8XyAgIF8gIF9ffCB8IF9fXyAgIF8gX18gX19fICAgX19fICBfX3wgfF8gIF9fIF9cbi8vICAgIHwgfCAnXyBcXCAvIF9ffCB8IHwgfCB8LyBfYCB8LyBfIFxcIHwgJ18gYCBfIFxcIC8gXyBcXC8gX2AgfCB8LyBfYCB8XG4vLyAgICB8IHwgfCB8IHwgKF9ffCB8IHxffCB8IChffCB8ICBfXy8gfCB8IHwgfCB8IHwgIF9fLyAoX3wgfCB8IChffCB8XG4vLyAgICB8X3xffCB8X3xcXF9fX3xffFxcX18sX3xcXF9fLF98XFxfX198IHxffCB8X3wgfF98XFxfX198XFxfXyxffF98XFxfXyxffFxuLy9cbi8vICAgICAgU2ltcGxlLCBlbGVnYW50IGFuZCBtYWludGFpbmFibGUgbWVkaWEgcXVlcmllcyBpbiBTYXNzXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIHYyLjAuMFxuLy9cbi8vICAgICAgICBodHRwczovL2VkdWFyZG9ib3VjYXMuZ2l0aHViLmlvL2luY2x1ZGUtbWVkaWFcbi8vXG4vLyAgICAgICAgIEF1dGhvcnM6IEVkdWFyZG8gQm91Y2FzIChAZWR1YXJkb2JvdWNhcylcbi8vICAgICAgICAgICAgICAgICAgS2l0dHkgR2lyYXVkZWwgKEBraXR0eWdpcmF1ZGVsKVxuLy9cbi8vICAgICAgVGhpcyBwcm9qZWN0IGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgTUlUIGxpY2Vuc2VcbkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vL1xuLy8vIGluY2x1ZGUtbWVkaWEgbGlicmFyeSBwdWJsaWMgY29uZmlndXJhdGlvblxuLy8vIEBhdXRob3IgRWR1YXJkbyBCb3VjYXNcbi8vLyBAYWNjZXNzIHB1YmxpY1xuLy8vL1xuQHVzZSAnc2FzczptYXRoJztcbkB1c2UgJ3Nhc3M6bWFwJztcbkB1c2UgJ3Nhc3M6bGlzdCc7XG5AdXNlICdzYXNzOnN0cmluZyc7XG5AdXNlICdzYXNzOm1ldGEnO1xuXG4vLy9cbi8vLyBDcmVhdGVzIGEgbGlzdCBvZiBnbG9iYWwgYnJlYWtwb2ludHNcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBDcmVhdGVzIGEgc2luZ2xlIGJyZWFrcG9pbnQgd2l0aCB0aGUgbGFiZWwgYHBob25lYFxuLy8vICAkYnJlYWtwb2ludHM6ICgncGhvbmUnOiAzMjBweCk7XG4vLy9cbiRicmVha3BvaW50czogKFxuICAncGhvbmUnOiAzMjBweCxcbiAgJ3RhYmxldCc6IDc2OHB4LFxuICAnZGVza3RvcCc6IDEwMjRweCxcbikgIWRlZmF1bHQ7XG5cbi8vL1xuLy8vIENyZWF0ZXMgYSBsaXN0IG9mIHN0YXRpYyBleHByZXNzaW9ucyBvciBtZWRpYSB0eXBlc1xuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIENyZWF0ZXMgYSBzaW5nbGUgbWVkaWEgdHlwZSAoc2NyZWVuKVxuLy8vICAkbWVkaWEtZXhwcmVzc2lvbnM6ICgnc2NyZWVuJzogJ3NjcmVlbicpO1xuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIENyZWF0ZXMgYSBzdGF0aWMgZXhwcmVzc2lvbiB3aXRoIGxvZ2ljYWwgZGlzanVuY3Rpb24gKE9SIG9wZXJhdG9yKVxuLy8vICAkbWVkaWEtZXhwcmVzc2lvbnM6IChcbi8vLyAgICAncmV0aW5hMngnOiAnKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMiksIChtaW4tcmVzb2x1dGlvbjogMTkyZHBpKSdcbi8vLyAgKTtcbi8vL1xuJG1lZGlhLWV4cHJlc3Npb25zOiAoXG4gICdzY3JlZW4nOiAnc2NyZWVuJyxcbiAgJ3ByaW50JzogJ3ByaW50JyxcbiAgJ2hhbmRoZWxkJzogJ2hhbmRoZWxkJyxcbiAgJ2xhbmRzY2FwZSc6ICcob3JpZW50YXRpb246IGxhbmRzY2FwZSknLFxuICAncG9ydHJhaXQnOiAnKG9yaWVudGF0aW9uOiBwb3J0cmFpdCknLFxuICAncmV0aW5hMngnOlxuICAgICcoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwgKG1pbi1yZXNvbHV0aW9uOiAxOTJkcGkpLCAobWluLXJlc29sdXRpb246IDJkcHB4KScsXG4gICdyZXRpbmEzeCc6XG4gICAgJygtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDMpLCAobWluLXJlc29sdXRpb246IDM1MGRwaSksIChtaW4tcmVzb2x1dGlvbjogM2RwcHgpJyxcbikgIWRlZmF1bHQ7XG5cbi8vL1xuLy8vIERlZmluZXMgYSBudW1iZXIgdG8gYmUgYWRkZWQgb3Igc3VidHJhY3RlZCBmcm9tIGVhY2ggdW5pdCB3aGVuIGRlY2xhcmluZyBicmVha3BvaW50cyB3aXRoIGV4Y2x1c2l2ZSBpbnRlcnZhbHNcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBJbnRlcnZhbCBmb3IgcGl4ZWxzIGlzIGRlZmluZWQgYXMgYDFgIGJ5IGRlZmF1bHRcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz4xMjhweCcpIHt9XG4vLy9cbi8vLyAgLyogR2VuZXJhdGVzOiAqL1xuLy8vICBAbWVkaWEgKG1pbi13aWR0aDogMTI5cHgpIHt9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gSW50ZXJ2YWwgZm9yIGVtcyBpcyBkZWZpbmVkIGFzIGAwLjAxYCBieSBkZWZhdWx0XG4vLy8gIEBpbmNsdWRlIG1lZGlhKCc+MjBlbScpIHt9XG4vLy9cbi8vLyAgLyogR2VuZXJhdGVzOiAqL1xuLy8vICBAbWVkaWEgKG1pbi13aWR0aDogMjAuMDFlbSkge31cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBJbnRlcnZhbCBmb3IgcmVtcyBpcyBkZWZpbmVkIGFzIGAwLjFgIGJ5IGRlZmF1bHQsIHRvIGJlIHVzZWQgd2l0aCBgZm9udC1zaXplOiA2Mi41JTtgXG4vLy8gIEBpbmNsdWRlIG1lZGlhKCc+Mi4wcmVtJykge31cbi8vL1xuLy8vICAvKiBHZW5lcmF0ZXM6ICovXG4vLy8gIEBtZWRpYSAobWluLXdpZHRoOiAyLjFyZW0pIHt9XG4vLy9cbiR1bml0LWludGVydmFsczogKFxuICAncHgnOiAxLFxuICAnZW0nOiAwLjAxLFxuICAncmVtJzogMC4xLFxuICAnJzogMCxcbikgIWRlZmF1bHQ7XG5cbi8vL1xuLy8vIERlZmluZXMgd2hldGhlciBzdXBwb3J0IGZvciBtZWRpYSBxdWVyaWVzIGlzIGF2YWlsYWJsZSwgdXNlZnVsIGZvciBjcmVhdGluZyBzZXBhcmF0ZSBzdHlsZXNoZWV0c1xuLy8vIGZvciBicm93c2VycyB0aGF0IGRvbid0IHN1cHBvcnQgbWVkaWEgcXVlcmllcy5cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBEaXNhYmxlcyBzdXBwb3J0IGZvciBtZWRpYSBxdWVyaWVzXG4vLy8gICRpbS1tZWRpYS1zdXBwb3J0OiBmYWxzZTtcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz49dGFibGV0Jykge1xuLy8vICAgIC5mb28ge1xuLy8vICAgICAgY29sb3I6IHRvbWF0bztcbi8vLyAgICB9XG4vLy8gIH1cbi8vL1xuLy8vICAvKiBHZW5lcmF0ZXM6ICovXG4vLy8gIC5mb28ge1xuLy8vICAgIGNvbG9yOiB0b21hdG87XG4vLy8gIH1cbi8vL1xuJGltLW1lZGlhLXN1cHBvcnQ6IHRydWUgIWRlZmF1bHQ7XG5cbi8vL1xuLy8vIFNlbGVjdHMgd2hpY2ggYnJlYWtwb2ludCB0byBlbXVsYXRlIHdoZW4gc3VwcG9ydCBmb3IgbWVkaWEgcXVlcmllcyBpcyBkaXNhYmxlZC4gTWVkaWEgcXVlcmllcyB0aGF0IHN0YXJ0IGF0IG9yXG4vLy8gaW50ZXJjZXB0IHRoZSBicmVha3BvaW50IHdpbGwgYmUgZGlzcGxheWVkLCBhbnkgb3RoZXJzIHdpbGwgYmUgaWdub3JlZC5cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBUaGlzIG1lZGlhIHF1ZXJ5IHdpbGwgc2hvdyBiZWNhdXNlIGl0IGludGVyY2VwdHMgdGhlIHN0YXRpYyBicmVha3BvaW50XG4vLy8gICRpbS1tZWRpYS1zdXBwb3J0OiBmYWxzZTtcbi8vLyAgJGltLW5vLW1lZGlhLWJyZWFrcG9pbnQ6ICdkZXNrdG9wJztcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz49dGFibGV0Jykge1xuLy8vICAgIC5mb28ge1xuLy8vICAgICAgY29sb3I6IHRvbWF0bztcbi8vLyAgICB9XG4vLy8gIH1cbi8vL1xuLy8vICAvKiBHZW5lcmF0ZXM6ICovXG4vLy8gIC5mb28ge1xuLy8vICAgIGNvbG9yOiB0b21hdG87XG4vLy8gIH1cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBUaGlzIG1lZGlhIHF1ZXJ5IHdpbGwgTk9UIHNob3cgYmVjYXVzZSBpdCBkb2VzIG5vdCBpbnRlcmNlcHQgdGhlIGRlc2t0b3AgYnJlYWtwb2ludFxuLy8vICAkaW0tbWVkaWEtc3VwcG9ydDogZmFsc2U7XG4vLy8gICRpbS1uby1tZWRpYS1icmVha3BvaW50OiAndGFibGV0Jztcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz49ZGVza3RvcCcpIHtcbi8vLyAgICAuZm9vIHtcbi8vLyAgICAgIGNvbG9yOiB0b21hdG87XG4vLy8gICAgfVxuLy8vICB9XG4vLy9cbi8vLyAgLyogTm8gb3V0cHV0ICovXG4vLy9cbiRpbS1uby1tZWRpYS1icmVha3BvaW50OiAnZGVza3RvcCcgIWRlZmF1bHQ7XG5cbi8vL1xuLy8vIFNlbGVjdHMgd2hpY2ggbWVkaWEgZXhwcmVzc2lvbnMgYXJlIGFsbG93ZWQgaW4gYW4gZXhwcmVzc2lvbiBmb3IgaXQgdG8gYmUgdXNlZCB3aGVuIG1lZGlhIHF1ZXJpZXNcbi8vLyBhcmUgbm90IHN1cHBvcnRlZC5cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBUaGlzIG1lZGlhIHF1ZXJ5IHdpbGwgc2hvdyBiZWNhdXNlIGl0IGludGVyY2VwdHMgdGhlIHN0YXRpYyBicmVha3BvaW50IGFuZCBjb250YWlucyBvbmx5IGFjY2VwdGVkIG1lZGlhIGV4cHJlc3Npb25zXG4vLy8gICRpbS1tZWRpYS1zdXBwb3J0OiBmYWxzZTtcbi8vLyAgJGltLW5vLW1lZGlhLWJyZWFrcG9pbnQ6ICdkZXNrdG9wJztcbi8vLyAgJGltLW5vLW1lZGlhLWV4cHJlc3Npb25zOiAoJ3NjcmVlbicpO1xuLy8vICBAaW5jbHVkZSBtZWRpYSgnPj10YWJsZXQnLCAnc2NyZWVuJykge1xuLy8vICAgIC5mb28ge1xuLy8vICAgICAgY29sb3I6IHRvbWF0bztcbi8vLyAgICB9XG4vLy8gIH1cbi8vL1xuLy8vICAgLyogR2VuZXJhdGVzOiAqL1xuLy8vICAgLmZvbyB7XG4vLy8gICAgIGNvbG9yOiB0b21hdG87XG4vLy8gICB9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gVGhpcyBtZWRpYSBxdWVyeSB3aWxsIE5PVCBzaG93IGJlY2F1c2UgaXQgaW50ZXJjZXB0cyB0aGUgc3RhdGljIGJyZWFrcG9pbnQgYnV0IGNvbnRhaW5zIGEgbWVkaWEgZXhwcmVzc2lvbiB0aGF0IGlzIG5vdCBhY2NlcHRlZFxuLy8vICAkaW0tbWVkaWEtc3VwcG9ydDogZmFsc2U7XG4vLy8gICRpbS1uby1tZWRpYS1icmVha3BvaW50OiAnZGVza3RvcCc7XG4vLy8gICRpbS1uby1tZWRpYS1leHByZXNzaW9uczogKCdzY3JlZW4nKTtcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz49dGFibGV0JywgJ3JldGluYTJ4Jykge1xuLy8vICAgIC5mb28ge1xuLy8vICAgICAgY29sb3I6IHRvbWF0bztcbi8vLyAgICB9XG4vLy8gIH1cbi8vL1xuLy8vICAvKiBObyBvdXRwdXQgKi9cbi8vL1xuJGltLW5vLW1lZGlhLWV4cHJlc3Npb25zOiAoJ3NjcmVlbicsICdwb3J0cmFpdCcsICdsYW5kc2NhcGUnKSAhZGVmYXVsdDtcblxuLy8vL1xuLy8vIENyb3NzLWVuZ2luZSBsb2dnaW5nIGVuZ2luZVxuLy8vIEBhdXRob3IgS2l0dHkgR2lyYXVkZWxcbi8vLyBAYWNjZXNzIHByaXZhdGVcbi8vLy9cblxuLy8vXG4vLy8gTG9nIGEgbWVzc2FnZSBlaXRoZXIgd2l0aCBgQGVycm9yYCBpZiBzdXBwb3J0ZWRcbi8vLyBlbHNlIHdpdGggYEB3YXJuYCwgdXNpbmcgYGZlYXR1cmUtZXhpc3RzKCdhdC1lcnJvcicpYFxuLy8vIHRvIGRldGVjdCBzdXBwb3J0LlxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRtZXNzYWdlIC0gTWVzc2FnZSB0byBsb2dcbi8vL1xuQGZ1bmN0aW9uIGltLWxvZygkbWVzc2FnZSkge1xuICBAaWYgbWV0YS5mZWF0dXJlLWV4aXN0cygnYXQtZXJyb3InKSB7XG4gICAgQGVycm9yICRtZXNzYWdlO1xuICB9IEBlbHNlIHtcbiAgICBAd2FybiAkbWVzc2FnZTtcbiAgICAkXzogbm9vcCgpO1xuICB9XG5cbiAgQHJldHVybiAkbWVzc2FnZTtcbn1cblxuLy8vXG4vLy8gV3JhcHBlciBtaXhpbiBmb3IgdGhlIGxvZyBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgdXNlZCB3aXRoIGEgbW9yZSBmcmllbmRseVxuLy8vIEFQSSB0aGFuIGBAaWYgaW0tbG9nKCcuLicpIHt9YCBvciBgJF86IGltLWxvZygnLi4nKWAuIEJhc2ljYWxseSwgdXNlIHRoZSBmdW5jdGlvblxuLy8vIHdpdGhpbiBmdW5jdGlvbnMgYmVjYXVzZSBpdCBpcyBub3QgcG9zc2libGUgdG8gaW5jbHVkZSBhIG1peGluIGluIGEgZnVuY3Rpb25cbi8vLyBhbmQgdXNlIHRoZSBtaXhpbiBldmVyeXdoZXJlIGVsc2UgYmVjYXVzZSBpdCdzIG11Y2ggbW9yZSBlbGVnYW50LlxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRtZXNzYWdlIC0gTWVzc2FnZSB0byBsb2dcbi8vL1xuQG1peGluIGxvZygkbWVzc2FnZSkge1xuICBAaWYgaW0tbG9nKCRtZXNzYWdlKSB7XG4gIH1cbn1cblxuLy8vXG4vLy8gRnVuY3Rpb24gd2l0aCBubyBgQHJldHVybmAgY2FsbGVkIG5leHQgdG8gYEB3YXJuYCBpbiBTYXNzIDMuM1xuLy8vIHRvIHRyaWdnZXIgYSBjb21waWxpbmcgZXJyb3IgYW5kIHN0b3AgdGhlIHByb2Nlc3MuXG4vLy9cbkBmdW5jdGlvbiBub29wKCkge1xufVxuXG4vLy9cbi8vLyBEZXRlcm1pbmVzIHdoZXRoZXIgYSBsaXN0IG9mIGNvbmRpdGlvbnMgaXMgaW50ZXJjZXB0ZWQgYnkgdGhlIHN0YXRpYyBicmVha3BvaW50LlxuLy8vXG4vLy8gQHBhcmFtIHtBcmdsaXN0fSAgICRjb25kaXRpb25zICAtIE1lZGlhIHF1ZXJ5IGNvbmRpdGlvbnNcbi8vL1xuLy8vIEByZXR1cm4ge0Jvb2xlYW59IC0gUmV0dXJucyB0cnVlIGlmIHRoZSBjb25kaXRpb25zIGFyZSBpbnRlcmNlcHRlZCBieSB0aGUgc3RhdGljIGJyZWFrcG9pbnRcbi8vL1xuQGZ1bmN0aW9uIGltLWludGVyY2VwdHMtc3RhdGljLWJyZWFrcG9pbnQoJGNvbmRpdGlvbnMuLi4pIHtcbiAgJG5vLW1lZGlhLWJyZWFrcG9pbnQtdmFsdWU6IG1hcC5nZXQoJGJyZWFrcG9pbnRzLCAkaW0tbm8tbWVkaWEtYnJlYWtwb2ludCk7XG5cbiAgQGlmIG5vdCAkbm8tbWVkaWEtYnJlYWtwb2ludC12YWx1ZSB7XG4gICAgQGlmIGltLWxvZygnYCN7JGltLW5vLW1lZGlhLWJyZWFrcG9pbnR9YCBpcyBub3QgYSB2YWxpZCBicmVha3BvaW50LicpIHtcbiAgICB9XG4gIH1cblxuICBAZWFjaCAkY29uZGl0aW9uIGluICRjb25kaXRpb25zIHtcbiAgICBAaWYgbm90IG1hcC5oYXMta2V5KCRtZWRpYS1leHByZXNzaW9ucywgJGNvbmRpdGlvbikge1xuICAgICAgJG9wZXJhdG9yOiBnZXQtZXhwcmVzc2lvbi1vcGVyYXRvcigkY29uZGl0aW9uKTtcbiAgICAgICRwcmVmaXg6IGdldC1leHByZXNzaW9uLXByZWZpeCgkb3BlcmF0b3IpO1xuICAgICAgJHZhbHVlOiBnZXQtZXhwcmVzc2lvbi12YWx1ZSgkY29uZGl0aW9uLCAkb3BlcmF0b3IpO1xuXG4gICAgICBAaWYgKCRwcmVmaXggPT0gJ21heCcgYW5kICR2YWx1ZSA8PSAkbm8tbWVkaWEtYnJlYWtwb2ludC12YWx1ZSkgb3JcbiAgICAgICAgKCRwcmVmaXggPT0gJ21pbicgYW5kICR2YWx1ZSA+ICRuby1tZWRpYS1icmVha3BvaW50LXZhbHVlKVxuICAgICAge1xuICAgICAgICBAcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gQGVsc2UgaWYgbm90IGxpc3QuaW5kZXgoJGltLW5vLW1lZGlhLWV4cHJlc3Npb25zLCAkY29uZGl0aW9uKSB7XG4gICAgICBAcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gdHJ1ZTtcbn1cblxuLy8vL1xuLy8vIFBhcnNpbmcgZW5naW5lXG4vLy8gQGF1dGhvciBLaXR0eSBHaXJhdWRlbFxuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxuLy8vL1xuXG4vLy9cbi8vLyBHZXQgb3BlcmF0b3Igb2YgYW4gZXhwcmVzc2lvblxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRleHByZXNzaW9uIC0gRXhwcmVzc2lvbiB0byBleHRyYWN0IG9wZXJhdG9yIGZyb21cbi8vL1xuLy8vIEByZXR1cm4ge1N0cmluZ30gLSBBbnkgb2YgYD49YCwgYD5gLCBgPD1gLCBgPGAsIGDiiaVgLCBg4omkYFxuLy8vXG5AZnVuY3Rpb24gZ2V0LWV4cHJlc3Npb24tb3BlcmF0b3IoJGV4cHJlc3Npb24pIHtcbiAgQGVhY2ggJG9wZXJhdG9yIGluICgnPj0nLCAnPicsICc8PScsICc8JywgJ+KJpScsICfiiaQnKSB7XG4gICAgQGlmIHN0cmluZy5pbmRleCgkZXhwcmVzc2lvbiwgJG9wZXJhdG9yKSB7XG4gICAgICBAcmV0dXJuICRvcGVyYXRvcjtcbiAgICB9XG4gIH1cblxuICAvLyBJdCBpcyBub3QgcG9zc2libGUgdG8gaW5jbHVkZSBhIG1peGluIGluc2lkZSBhIGZ1bmN0aW9uLCBzbyB3ZSBoYXZlIHRvXG4gIC8vIHJlbHkgb24gdGhlIGBpbS1sb2coLi4pYCBmdW5jdGlvbiByYXRoZXIgdGhhbiB0aGUgYGxvZyguLilgIG1peGluLiBCZWNhdXNlXG4gIC8vIGZ1bmN0aW9ucyBjYW5ub3QgYmUgY2FsbGVkIGFueXdoZXJlIGluIFNhc3MsIHdlIG5lZWQgdG8gaGFjayB0aGUgY2FsbCBpblxuICAvLyBhIGR1bW15IHZhcmlhYmxlLCBzdWNoIGFzIGAkX2AuIElmIGFueWJvZHkgZXZlciByYWlzZSBhIHNjb3BpbmcgaXNzdWUgd2l0aFxuICAvLyBTYXNzIDMuMywgY2hhbmdlIHRoaXMgbGluZSBpbiBgQGlmIGltLWxvZyguLikge31gIGluc3RlYWQuXG4gICRfOiBpbS1sb2coJ05vIG9wZXJhdG9yIGZvdW5kIGluIGAjeyRleHByZXNzaW9ufWAuJyk7XG59XG5cbi8vL1xuLy8vIEdldCBkaW1lbnNpb24gb2YgYW4gZXhwcmVzc2lvbiwgYmFzZWQgb24gYSBmb3VuZCBvcGVyYXRvclxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRleHByZXNzaW9uIC0gRXhwcmVzc2lvbiB0byBleHRyYWN0IGRpbWVuc2lvbiBmcm9tXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRvcGVyYXRvciAtIE9wZXJhdG9yIGZyb20gYCRleHByZXNzaW9uYFxuLy8vXG4vLy8gQHJldHVybiB7U3RyaW5nfSAtIGB3aWR0aGAgb3IgYGhlaWdodGAgKG9yIHBvdGVudGlhbGx5IGFueXRoaW5nIGVsc2UpXG4vLy9cbkBmdW5jdGlvbiBnZXQtZXhwcmVzc2lvbi1kaW1lbnNpb24oJGV4cHJlc3Npb24sICRvcGVyYXRvcikge1xuICAkb3BlcmF0b3ItaW5kZXg6IHN0cmluZy5pbmRleCgkZXhwcmVzc2lvbiwgJG9wZXJhdG9yKTtcbiAgJHBhcnNlZC1kaW1lbnNpb246IHN0cmluZy5zbGljZSgkZXhwcmVzc2lvbiwgMCwgJG9wZXJhdG9yLWluZGV4IC0gMSk7XG4gICRkaW1lbnNpb246ICd3aWR0aCc7XG5cbiAgQGlmIHN0cmluZy5sZW5ndGgoJHBhcnNlZC1kaW1lbnNpb24pID4gMCB7XG4gICAgJGRpbWVuc2lvbjogJHBhcnNlZC1kaW1lbnNpb247XG4gIH1cblxuICBAcmV0dXJuICRkaW1lbnNpb247XG59XG5cbi8vL1xuLy8vIEdldCBkaW1lbnNpb24gcHJlZml4IGJhc2VkIG9uIGFuIG9wZXJhdG9yXG4vLy9cbi8vLyBAcGFyYW0ge1N0cmluZ30gJG9wZXJhdG9yIC0gT3BlcmF0b3Jcbi8vL1xuLy8vIEByZXR1cm4ge1N0cmluZ30gLSBgbWluYCBvciBgbWF4YFxuLy8vXG5AZnVuY3Rpb24gZ2V0LWV4cHJlc3Npb24tcHJlZml4KCRvcGVyYXRvcikge1xuICBAcmV0dXJuIGlmKGxpc3QuaW5kZXgoKCc8JywgJzw9JywgJ+KJpCcpLCAkb3BlcmF0b3IpLCAnbWF4JywgJ21pbicpO1xufVxuXG4vLy9cbi8vLyBHZXQgdmFsdWUgb2YgYW4gZXhwcmVzc2lvbiwgYmFzZWQgb24gYSBmb3VuZCBvcGVyYXRvclxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRleHByZXNzaW9uIC0gRXhwcmVzc2lvbiB0byBleHRyYWN0IHZhbHVlIGZyb21cbi8vLyBAcGFyYW0ge1N0cmluZ30gJG9wZXJhdG9yIC0gT3BlcmF0b3IgZnJvbSBgJGV4cHJlc3Npb25gXG4vLy9cbi8vLyBAcmV0dXJuIHtOdW1iZXJ9IC0gQSBudW1lcmljIHZhbHVlXG4vLy9cbkBmdW5jdGlvbiBnZXQtZXhwcmVzc2lvbi12YWx1ZSgkZXhwcmVzc2lvbiwgJG9wZXJhdG9yKSB7XG4gICRvcGVyYXRvci1pbmRleDogc3RyaW5nLmluZGV4KCRleHByZXNzaW9uLCAkb3BlcmF0b3IpO1xuICAkdmFsdWU6IHN0cmluZy5zbGljZSgkZXhwcmVzc2lvbiwgJG9wZXJhdG9yLWluZGV4ICsgc3RyaW5nLmxlbmd0aCgkb3BlcmF0b3IpKTtcblxuICBAaWYgbWFwLmhhcy1rZXkoJGJyZWFrcG9pbnRzLCAkdmFsdWUpIHtcbiAgICAkdmFsdWU6IG1hcC5nZXQoJGJyZWFrcG9pbnRzLCAkdmFsdWUpO1xuICB9IEBlbHNlIHtcbiAgICAkdmFsdWU6IHRvLW51bWJlcigkdmFsdWUpO1xuICB9XG5cbiAgJGludGVydmFsOiBtYXAuZ2V0KCR1bml0LWludGVydmFscywgbWF0aC51bml0KCR2YWx1ZSkpO1xuXG4gIEBpZiBub3QgJGludGVydmFsIHtcbiAgICAvLyBJdCBpcyBub3QgcG9zc2libGUgdG8gaW5jbHVkZSBhIG1peGluIGluc2lkZSBhIGZ1bmN0aW9uLCBzbyB3ZSBoYXZlIHRvXG4gICAgLy8gcmVseSBvbiB0aGUgYGltLWxvZyguLilgIGZ1bmN0aW9uIHJhdGhlciB0aGFuIHRoZSBgbG9nKC4uKWAgbWl4aW4uIEJlY2F1c2VcbiAgICAvLyBmdW5jdGlvbnMgY2Fubm90IGJlIGNhbGxlZCBhbnl3aGVyZSBpbiBTYXNzLCB3ZSBuZWVkIHRvIGhhY2sgdGhlIGNhbGwgaW5cbiAgICAvLyBhIGR1bW15IHZhcmlhYmxlLCBzdWNoIGFzIGAkX2AuIElmIGFueWJvZHkgZXZlciByYWlzZSBhIHNjb3BpbmcgaXNzdWUgd2l0aFxuICAgIC8vIFNhc3MgMy4zLCBjaGFuZ2UgdGhpcyBsaW5lIGluIGBAaWYgaW0tbG9nKC4uKSB7fWAgaW5zdGVhZC5cbiAgICAkXzogaW0tbG9nKCdVbmtub3duIHVuaXQgYCN7bWF0aC51bml0KCR2YWx1ZSl9YC4nKTtcbiAgfVxuXG4gIEBpZiAkb3BlcmF0b3IgPT0gJz4nIHtcbiAgICAkdmFsdWU6ICR2YWx1ZSArICRpbnRlcnZhbDtcbiAgfSBAZWxzZSBpZiAkb3BlcmF0b3IgPT0gJzwnIHtcbiAgICAkdmFsdWU6ICR2YWx1ZSAtICRpbnRlcnZhbDtcbiAgfVxuXG4gIEByZXR1cm4gJHZhbHVlO1xufVxuXG4vLy9cbi8vLyBQYXJzZSBhbiBleHByZXNzaW9uIHRvIHJldHVybiBhIHZhbGlkIG1lZGlhLXF1ZXJ5IGV4cHJlc3Npb25cbi8vL1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkZXhwcmVzc2lvbiAtIEV4cHJlc3Npb24gdG8gcGFyc2Vcbi8vL1xuLy8vIEByZXR1cm4ge1N0cmluZ30gLSBWYWxpZCBtZWRpYSBxdWVyeVxuLy8vXG5AZnVuY3Rpb24gcGFyc2UtZXhwcmVzc2lvbigkZXhwcmVzc2lvbikge1xuICAvLyBJZiBpdCBpcyBwYXJ0IG9mICRtZWRpYS1leHByZXNzaW9ucywgaXQgaGFzIG5vIG9wZXJhdG9yXG4gIC8vIHRoZW4gdGhlcmUgaXMgbm8gbmVlZCB0byBnbyBhbnkgZnVydGhlciwganVzdCByZXR1cm4gdGhlIHZhbHVlXG4gIEBpZiBtYXAuaGFzLWtleSgkbWVkaWEtZXhwcmVzc2lvbnMsICRleHByZXNzaW9uKSB7XG4gICAgQHJldHVybiBtYXAuZ2V0KCRtZWRpYS1leHByZXNzaW9ucywgJGV4cHJlc3Npb24pO1xuICB9XG5cbiAgJG9wZXJhdG9yOiBnZXQtZXhwcmVzc2lvbi1vcGVyYXRvcigkZXhwcmVzc2lvbik7XG4gICRkaW1lbnNpb246IGdldC1leHByZXNzaW9uLWRpbWVuc2lvbigkZXhwcmVzc2lvbiwgJG9wZXJhdG9yKTtcbiAgJHByZWZpeDogZ2V0LWV4cHJlc3Npb24tcHJlZml4KCRvcGVyYXRvcik7XG4gICR2YWx1ZTogZ2V0LWV4cHJlc3Npb24tdmFsdWUoJGV4cHJlc3Npb24sICRvcGVyYXRvcik7XG5cbiAgQHJldHVybiAnKCN7JHByZWZpeH0tI3skZGltZW5zaW9ufTogI3skdmFsdWV9KSc7XG59XG5cbi8vL1xuLy8vIFNsaWNlIGAkbGlzdGAgYmV0d2VlbiBgJHN0YXJ0YCBhbmQgYCRlbmRgIGluZGV4ZXNcbi8vL1xuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxuLy8vXG4vLy8gQHBhcmFtIHtMaXN0fSAkbGlzdCAtIExpc3QgdG8gc2xpY2Vcbi8vLyBAcGFyYW0ge051bWJlcn0gJHN0YXJ0IFsxXSAtIFN0YXJ0IGluZGV4XG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRlbmQgW2xlbmd0aCgkbGlzdCldIC0gRW5kIGluZGV4XG4vLy9cbi8vLyBAcmV0dXJuIHtMaXN0fSBTbGljZWQgbGlzdFxuLy8vXG5AZnVuY3Rpb24gc2xpY2UoJGxpc3QsICRzdGFydDogMSwgJGVuZDogbGlzdC5sZW5ndGgoJGxpc3QpKSB7XG4gIEBpZiBsaXN0Lmxlbmd0aCgkbGlzdCkgPCAxIG9yICRzdGFydCA+ICRlbmQge1xuICAgIEByZXR1cm4gKCk7XG4gIH1cblxuICAkcmVzdWx0OiAoKTtcblxuICBAZm9yICRpIGZyb20gJHN0YXJ0IHRocm91Z2ggJGVuZCB7XG4gICAgJHJlc3VsdDogbGlzdC5hcHBlbmQoJHJlc3VsdCwgbGlzdC5udGgoJGxpc3QsICRpKSwgY29tbWEpO1xuICB9XG5cbiAgQHJldHVybiAkcmVzdWx0O1xufVxuXG4vLy8vXG4vLy8gU3RyaW5nIHRvIG51bWJlciBjb252ZXJ0ZXJcbi8vLyBAYXV0aG9yIEtpdHR5IEdpcmF1ZGVsXG4vLy8gQGFjY2VzcyBwcml2YXRlXG4vLy8vXG5cbi8vL1xuLy8vIENhc3RzIGEgc3RyaW5nIGludG8gYSBudW1iZXJcbi8vL1xuLy8vIEBwYXJhbSB7U3RyaW5nIHwgTnVtYmVyfSAkdmFsdWUgLSBWYWx1ZSB0byBiZSBwYXJzZWRcbi8vL1xuLy8vIEByZXR1cm4ge051bWJlcn1cbi8vL1xuXG5AZnVuY3Rpb24gdG8tbnVtYmVyKCR2YWx1ZSkge1xuICBAaWYgbWV0YS50eXBlLW9mKCR2YWx1ZSkgPT0gJ251bWJlcicge1xuICAgIEByZXR1cm4gJHZhbHVlO1xuICB9IEBlbHNlIGlmIG1ldGEudHlwZS1vZigkdmFsdWUpICE9ICdzdHJpbmcnIHtcbiAgICAkXzogaW0tbG9nKCdWYWx1ZSBmb3IgYHRvLW51bWJlcmAgc2hvdWxkIGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLicpO1xuICB9XG5cbiAgJGZpcnN0LWNoYXJhY3Rlcjogc3RyaW5nLnNsaWNlKCR2YWx1ZSwgMSwgMSk7XG4gICRyZXN1bHQ6IDA7XG4gICRkaWdpdHM6IDA7XG4gICRtaW51czogKCRmaXJzdC1jaGFyYWN0ZXIgPT0gJy0nKTtcbiAgJG51bWJlcnM6IChcbiAgICAnMCc6IDAsXG4gICAgJzEnOiAxLFxuICAgICcyJzogMixcbiAgICAnMyc6IDMsXG4gICAgJzQnOiA0LFxuICAgICc1JzogNSxcbiAgICAnNic6IDYsXG4gICAgJzcnOiA3LFxuICAgICc4JzogOCxcbiAgICAnOSc6IDksXG4gICk7XG5cbiAgLy8gUmVtb3ZlICsvLSBzaWduIGlmIHByZXNlbnQgYXQgZmlyc3QgY2hhcmFjdGVyXG4gIEBpZiAoJGZpcnN0LWNoYXJhY3RlciA9PSAnKycgb3IgJGZpcnN0LWNoYXJhY3RlciA9PSAnLScpIHtcbiAgICAkdmFsdWU6IHN0cmluZy5zbGljZSgkdmFsdWUsIDIpO1xuICB9XG5cbiAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCBzdHJpbmcubGVuZ3RoKCR2YWx1ZSkge1xuICAgICRjaGFyYWN0ZXI6IHN0cmluZy5zbGljZSgkdmFsdWUsICRpLCAkaSk7XG5cbiAgICBAaWYgbm90KGxpc3QuaW5kZXgobWFwLmtleXMoJG51bWJlcnMpLCAkY2hhcmFjdGVyKSBvciAkY2hhcmFjdGVyID09ICcuJykge1xuICAgICAgQHJldHVybiB0by1sZW5ndGgoaWYoJG1pbnVzLCAtJHJlc3VsdCwgJHJlc3VsdCksIHN0cmluZy5zbGljZSgkdmFsdWUsICRpKSk7XG4gICAgfVxuXG4gICAgQGlmICRjaGFyYWN0ZXIgPT0gJy4nIHtcbiAgICAgICRkaWdpdHM6IDE7XG4gICAgfSBAZWxzZSBpZiAkZGlnaXRzID09IDAge1xuICAgICAgJHJlc3VsdDogJHJlc3VsdCAqIDEwICsgbWFwLmdldCgkbnVtYmVycywgJGNoYXJhY3Rlcik7XG4gICAgfSBAZWxzZSB7XG4gICAgICAkZGlnaXRzOiAkZGlnaXRzICogMTA7XG4gICAgICAkcmVzdWx0OiAkcmVzdWx0ICsgbWF0aC5kaXYobWFwLmdldCgkbnVtYmVycywgJGNoYXJhY3RlciksICRkaWdpdHMpO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gaWYoJG1pbnVzLCAtJHJlc3VsdCwgJHJlc3VsdCk7XG59XG5cbi8vL1xuLy8vIEFkZCBgJHVuaXRgIHRvIGAkdmFsdWVgXG4vLy9cbi8vLyBAcGFyYW0ge051bWJlcn0gJHZhbHVlIC0gVmFsdWUgdG8gYWRkIHVuaXQgdG9cbi8vLyBAcGFyYW0ge1N0cmluZ30gJHVuaXQgLSBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHVuaXRcbi8vL1xuLy8vIEByZXR1cm4ge051bWJlcn0gLSBgJHZhbHVlYCBleHByZXNzZWQgaW4gYCR1bml0YFxuLy8vXG5AZnVuY3Rpb24gdG8tbGVuZ3RoKCR2YWx1ZSwgJHVuaXQpIHtcbiAgJHVuaXRzOiAoXG4gICAgJ3B4JzogMXB4LFxuICAgICdjbSc6IDFjbSxcbiAgICAnbW0nOiAxbW0sXG4gICAgJyUnOiAxJSxcbiAgICAnY2gnOiAxY2gsXG4gICAgJ3BjJzogMXBjLFxuICAgICdpbic6IDFpbixcbiAgICAnZW0nOiAxZW0sXG4gICAgJ3JlbSc6IDFyZW0sXG4gICAgJ3B0JzogMXB0LFxuICAgICdleCc6IDFleCxcbiAgICAndncnOiAxdncsXG4gICAgJ3ZoJzogMXZoLFxuICAgICd2bWluJzogMXZtaW4sXG4gICAgJ3ZtYXgnOiAxdm1heCxcbiAgKTtcblxuICBAaWYgbm90IGxpc3QuaW5kZXgobWFwLmtleXMoJHVuaXRzKSwgJHVuaXQpIHtcbiAgICAkXzogaW0tbG9nKCdJbnZhbGlkIHVuaXQgYCN7JHVuaXR9YC4nKTtcbiAgfVxuXG4gIEByZXR1cm4gJHZhbHVlICogbWFwLmdldCgkdW5pdHMsICR1bml0KTtcbn1cblxuLy8vXG4vLy8gVGhpcyBtaXhpbiBhaW1zIGF0IHJlZGVmaW5pbmcgdGhlIGNvbmZpZ3VyYXRpb24ganVzdCBmb3IgdGhlIHNjb3BlIG9mXG4vLy8gdGhlIGNhbGwuIEl0IGlzIGhlbHBmdWwgd2hlbiBoYXZpbmcgYSBjb21wb25lbnQgbmVlZGluZyBhbiBleHRlbmRlZFxuLy8vIGNvbmZpZ3VyYXRpb24gc3VjaCBhcyBjdXN0b20gYnJlYWtwb2ludHMgKHJlZmVycmVkIHRvIGFzIHR3ZWFrcG9pbnRzKVxuLy8vIGZvciBpbnN0YW5jZS5cbi8vL1xuLy8vIEBhdXRob3IgS2l0dHkgR2lyYXVkZWxcbi8vL1xuLy8vIEBwYXJhbSB7TWFwfSAkdHdlYWtwb2ludHMgWygpXSAtIE1hcCBvZiB0d2Vha3BvaW50cyB0byBiZSBtZXJnZWQgd2l0aCBgJGJyZWFrcG9pbnRzYFxuLy8vIEBwYXJhbSB7TWFwfSAkdHdlYWstbWVkaWEtZXhwcmVzc2lvbnMgWygpXSAtIE1hcCBvZiB0d2Vha2VkIG1lZGlhIGV4cHJlc3Npb25zIHRvIGJlIG1lcmdlZCB3aXRoIGAkbWVkaWEtZXhwcmVzc2lvbmBcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBFeHRlbmQgdGhlIGdsb2JhbCBicmVha3BvaW50cyB3aXRoIGEgdHdlYWtwb2ludFxuLy8vICBAaW5jbHVkZSBtZWRpYS1jb250ZXh0KCgnY3VzdG9tJzogNjc4cHgpKSB7XG4vLy8gICAgLmZvbyB7XG4vLy8gICAgICBAaW5jbHVkZSBtZWRpYSgnPnBob25lJywgJzw9Y3VzdG9tJykge1xuLy8vICAgICAgIC8vIC4uLlxuLy8vICAgICAgfVxuLy8vICAgIH1cbi8vLyAgfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIEV4dGVuZCB0aGUgZ2xvYmFsIG1lZGlhIGV4cHJlc3Npb25zIHdpdGggYSBjdXN0b20gb25lXG4vLy8gIEBpbmNsdWRlIG1lZGlhLWNvbnRleHQoJHR3ZWFrLW1lZGlhLWV4cHJlc3Npb25zOiAoJ2FsbCc6ICdhbGwnKSkge1xuLy8vICAgIC5mb28ge1xuLy8vICAgICAgQGluY2x1ZGUgbWVkaWEoJ2FsbCcsICc+cGhvbmUnKSB7XG4vLy8gICAgICAgLy8gLi4uXG4vLy8gICAgICB9XG4vLy8gICAgfVxuLy8vICB9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gRXh0ZW5kIGJvdGggY29uZmlndXJhdGlvbiBtYXBzXG4vLy8gIEBpbmNsdWRlIG1lZGlhLWNvbnRleHQoKCdjdXN0b20nOiA2NzhweCksICgnYWxsJzogJ2FsbCcpKSB7XG4vLy8gICAgLmZvbyB7XG4vLy8gICAgICBAaW5jbHVkZSBtZWRpYSgnYWxsJywgJz5waG9uZScsICc8PWN1c3RvbScpIHtcbi8vLyAgICAgICAvLyAuLi5cbi8vLyAgICAgIH1cbi8vLyAgICB9XG4vLy8gIH1cbi8vL1xuQG1peGluIG1lZGlhLWNvbnRleHQoJHR3ZWFrcG9pbnRzOiAoKSwgJHR3ZWFrLW1lZGlhLWV4cHJlc3Npb25zOiAoKSkge1xuICAvLyBTYXZlIGdsb2JhbCBjb25maWd1cmF0aW9uXG4gICRnbG9iYWwtYnJlYWtwb2ludHM6ICRicmVha3BvaW50cztcbiAgJGdsb2JhbC1tZWRpYS1leHByZXNzaW9uczogJG1lZGlhLWV4cHJlc3Npb25zO1xuXG4gIC8vIFVwZGF0ZSBnbG9iYWwgY29uZmlndXJhdGlvblxuICAkYnJlYWtwb2ludHM6IG1hcC5tZXJnZSgkYnJlYWtwb2ludHMsICR0d2Vha3BvaW50cykgIWdsb2JhbDtcbiAgJG1lZGlhLWV4cHJlc3Npb25zOiBtYXAubWVyZ2UoJG1lZGlhLWV4cHJlc3Npb25zLCAkdHdlYWstbWVkaWEtZXhwcmVzc2lvbnMpICFnbG9iYWw7XG5cbiAgQGNvbnRlbnQ7XG5cbiAgLy8gUmVzdG9yZSBnbG9iYWwgY29uZmlndXJhdGlvblxuICAkYnJlYWtwb2ludHM6ICRnbG9iYWwtYnJlYWtwb2ludHMgIWdsb2JhbDtcbiAgJG1lZGlhLWV4cHJlc3Npb25zOiAkZ2xvYmFsLW1lZGlhLWV4cHJlc3Npb25zICFnbG9iYWw7XG59XG5cbi8vLy9cbi8vLyBpbmNsdWRlLW1lZGlhIHB1YmxpYyBleHBvc2VkIEFQSVxuLy8vIEBhdXRob3IgRWR1YXJkbyBCb3VjYXNcbi8vLyBAYWNjZXNzIHB1YmxpY1xuLy8vL1xuXG4vLy9cbi8vLyBHZW5lcmF0ZXMgYSBtZWRpYSBxdWVyeSBiYXNlZCBvbiBhIGxpc3Qgb2YgY29uZGl0aW9uc1xuLy8vXG4vLy8gQHBhcmFtIHtBcmdsaXN0fSAgICRjb25kaXRpb25zICAtIE1lZGlhIHF1ZXJ5IGNvbmRpdGlvbnNcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBXaXRoIGEgc2luZ2xlIHNldCBicmVha3BvaW50XG4vLy8gIEBpbmNsdWRlIG1lZGlhKCc+cGhvbmUnKSB7IH1cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBXaXRoIHR3byBzZXQgYnJlYWtwb2ludHNcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz5waG9uZScsICc8PXRhYmxldCcpIHsgfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFdpdGggY3VzdG9tIHZhbHVlc1xuLy8vICBAaW5jbHVkZSBtZWRpYSgnPj0zNThweCcsICc8ODUwcHgnKSB7IH1cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBXaXRoIHNldCBicmVha3BvaW50cyB3aXRoIGN1c3RvbSB2YWx1ZXNcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz5kZXNrdG9wJywgJzw9MTM1MHB4JykgeyB9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gV2l0aCBhIHN0YXRpYyBleHByZXNzaW9uXG4vLy8gIEBpbmNsdWRlIG1lZGlhKCdyZXRpbmEyeCcpIHsgfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIE1peGluZyBldmVyeXRoaW5nXG4vLy8gIEBpbmNsdWRlIG1lZGlhKCc+PTM1MHB4JywgJzx0YWJsZXQnLCAncmV0aW5hM3gnKSB7IH1cbi8vL1xuQG1peGluIG1lZGlhKCRjb25kaXRpb25zLi4uKSB7XG4gIEBpZiAoJGltLW1lZGlhLXN1cHBvcnQgYW5kIGxpc3QubGVuZ3RoKCRjb25kaXRpb25zKSA9PSAwKSBvclxuICAgIChub3QgJGltLW1lZGlhLXN1cHBvcnQgYW5kIGltLWludGVyY2VwdHMtc3RhdGljLWJyZWFrcG9pbnQoJGNvbmRpdGlvbnMuLi4pKVxuICB7XG4gICAgQGNvbnRlbnQ7XG4gIH0gQGVsc2UgaWYgKCRpbS1tZWRpYS1zdXBwb3J0IGFuZCBsaXN0Lmxlbmd0aCgkY29uZGl0aW9ucykgPiAwKSB7XG4gICAgQG1lZGlhICN7c3RyaW5nLnVucXVvdGUocGFyc2UtZXhwcmVzc2lvbihsaXN0Lm50aCgkY29uZGl0aW9ucywgMSkpKX0ge1xuICAgICAgLy8gUmVjdXJzaXZlIGNhbGxcbiAgICAgIEBpbmNsdWRlIG1lZGlhKHNsaWNlKCRjb25kaXRpb25zLCAyKS4uLikge1xuICAgICAgICBAY29udGVudDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIiV0aXRsZS0yMCB7XHJcbiAgZm9udC1mYW1pbHk6ICRmb250LWdlb3JnZS14O1xyXG4gIGZvbnQtc2l6ZTogMnJlbTtcclxuXHJcbiAgQGluY2x1ZGUgbWVkaWEoXCI8cGhvbmVcIikge1xyXG4gICAgZm9udC1zaXplOiAzcmVtO1xyXG4gIH1cclxufVxyXG5cclxuJXRpdGxlLTMwIHtcclxuICBmb250LWZhbWlseTogJGZvbnQtZ2VvcmdlLXg7XHJcbiAgZm9udC1zaXplOiAzcmVtO1xyXG5cclxuICBAaW5jbHVkZSBtZWRpYShcIjxwaG9uZVwiKSB7XHJcbiAgICBmb250LXNpemU6IDUuMnJlbTtcclxuICB9XHJcbn1cclxuXHJcbiV0aXRsZS01MyB7XHJcbiAgZm9udC1mYW1pbHk6ICRmb250LWdlb3JnZS14O1xyXG4gIGZvbnQtc2l6ZTogNS4zcmVtO1xyXG4gIGxpbmUtaGVpZ2h0OiAxO1xyXG59XHJcblxyXG4ldGl0bGUtNjAge1xyXG4gIGZvbnQtZmFtaWx5OiAkZm9udC1nZW9yZ2UteDtcclxuICBmb250LXNpemU6IDhyZW07XHJcbn1cclxuXHJcbiV0aXRsZS0xMDAge1xyXG4gIGZvbnQtZmFtaWx5OiAkZm9udC1nZW9yZ2UteDtcclxuICBmb250LXNpemU6IDEwcmVtO1xyXG4gIGxpbmUtaGVpZ2h0OiAxO1xyXG5cclxuICBAaW5jbHVkZSBtZWRpYShcIjxwaG9uZVwiKSB7XHJcbiAgICBmb250LXNpemU6IDEycmVtO1xyXG4gIH1cclxufVxyXG5cclxuJXRpdGxlLTEyMCB7XHJcbiAgZm9udC1mYW1pbHk6ICRmb250LWdlb3JnZS14O1xyXG4gIGZvbnQtc2l6ZTogMTJyZW07XHJcbiAgbGluZS1oZWlnaHQ6IDAuODI7XHJcblxyXG4gIEBpbmNsdWRlIG1lZGlhKFwiPHBob25lXCIpIHtcclxuICAgIGZvbnQtc2l6ZTogMThyZW07XHJcbiAgfVxyXG59XHJcblxyXG4ldGl0bGUtMjAwIHtcclxuICBmb250LWZhbWlseTogJGZvbnQtZ2VvcmdlLXg7XHJcbiAgZm9udC1zaXplOiAyMHJlbTtcclxuXHJcbiAgQGluY2x1ZGUgbWVkaWEoXCI8PXBob25lXCIpIHtcclxuICB9XHJcbn1cclxuIiwiLy8gJGNvbG9yLWJyaWdodC1ncmF5OiAjMzczODRjO1xyXG4vLyAkY29sb3ItY2FkZXQtYmx1ZTogI2IyYjhjMztcclxuLy8gJGNvbG9yLWNvbnRlc3NhOiAjYzk3MTY0O1xyXG4vLyAkY29sb3ItcXVpY2tzYW5kOiAjYmM5NzhjO1xyXG4vLyAkY29sb3ItcXVhcnRlci1zcGFuaXNoLXdoaXRlOiAjZjlmMWU3O1xyXG5cclxuJGZvbnQtZ2VvcmdlLXg6IFwiR2VvcmdlIFhcIjtcclxuJGZvbnQtc3Vpc3NlLWJwOiBcIlN1aXNzZSBCUFwiO1xyXG4kZm9udC1ibG93YnJ1c2g6IFwiYmxvd2JydXNoXCI7XHJcbiRmb250LW1vbnRzZXJyYXQ6IFwiTW9udHNlcnJhdFwiO1xyXG5cclxuLy8gJGVhc2UtaW4tb3V0OiBjdWJpYy1iZXppZXIoMC43NywgMCwgMC4xNzUsIDEpO1xyXG4vLyAkZWFzZS1vdXQtZXhwbzogY3ViaWMtYmV6aWVyKDAuMTksIDEsIDAuMjIsIDEpO1xyXG5cclxuJHotaW5kZXhlczogKFwicHJlbG9hZGVyXCIsIFwibmF2aWdhdGlvblwiLCBcImNvbnRlbnRcIik7XHJcbiIsIkBmb250LWZhY2Uge1xyXG4gIGZvbnQtZmFtaWx5OiAkZm9udC1ibG93YnJ1c2g7XHJcbiAgc3JjOiB1cmwoXCIuLi9mb250cy9ibG93YnJ1c2gub3RmXCIpIGZvcm1hdChcIm9wZW50eXBlXCIpLFxyXG4gICAgdXJsKFwiLi4vZm9udHMvYmxvd2JydXNoLnR0ZlwiKSBmb3JtYXQoXCJ0cnVldHlwZVwiKTtcclxuICBmb250LXdlaWdodDogbm9ybWFsO1xyXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcclxufVxyXG5cclxuQGZvbnQtZmFjZSB7XHJcbiAgZm9udC1mYW1pbHk6ICRmb250LWdlb3JnZS14O1xyXG4gIHNyYzogdXJsKFwiLi4vZm9udHMvZ2VvcmdlLXgtcmVndWxhci53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSxcclxuICAgIHVybChcIi4uL2ZvbnRzL2dlb3JnZS14LXJlZ3VsYXIud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xyXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xyXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcclxufVxyXG5cclxuQGZvbnQtZmFjZSB7XHJcbiAgZm9udC1mYW1pbHk6ICRmb250LXN1aXNzZS1icDtcclxuICBzcmM6IHVybChcIi4uL2ZvbnRzL3N1aXNzZS1icC1yZWd1bGFyLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLFxyXG4gICAgdXJsKFwiLi4vZm9udHMvc3Vpc3NlLWJwLXJlZ3VsYXIud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xyXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xyXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcclxufVxyXG5cclxuQGZvbnQtZmFjZSB7XHJcbiAgZm9udC1mYW1pbHk6ICRmb250LXN1aXNzZS1icDtcclxuICBzcmM6IHVybChcIi4uL2ZvbnRzL3N1aXNzZS1icC1saWdodC53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSxcclxuICAgIHVybChcIi4uL2ZvbnRzL3N1aXNzZS1icC1saWdodC53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XHJcbiAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICBmb250LXN0eWxlOiBub3JtYWw7XHJcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xyXG59XHJcblxyXG5AZm9udC1mYWNlIHtcclxuICBmb250LWZhbWlseTogJGZvbnQtc3Vpc3NlLWJwO1xyXG4gIHNyYzogdXJsKFwiLi4vZm9udHMvc3Vpc3NlLWJwLXVsdHJhLWxpZ2h0LndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLFxyXG4gICAgdXJsKFwiLi4vZm9udHMvc3Vpc3NlLWJwLXVsdHJhLWxpZ2h0LndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcclxuICBmb250LXdlaWdodDogMjAwO1xyXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcclxuICBmb250LWRpc3BsYXk6IHN3YXA7XHJcbn1cclxuXHJcbkBmb250LWZhY2Uge1xyXG4gIGZvbnQtZmFtaWx5OiAkZm9udC1tb250c2VycmF0O1xyXG4gIHNyYzogdXJsKFwiLi4vZm9udHMvbW9udHNlcnJhdC50dGZcIikgZm9ybWF0KFwidHJ1ZXR5cGVcIik7XHJcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcclxuICBmb250LXN0eWxlOiBub3JtYWw7XHJcbn1cclxuIiwiKixcclxuKjphZnRlcixcclxuKjpiZWZvcmUge1xyXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgY3Vyc29yOiBub25lO1xyXG59XHJcblxyXG5odG1sIHtcclxuICAvLyB0aGUgY292ZXIgaGVyZSBtaXhpbiBpbiBpbnRlbmRlZCBmb3IgaGlnaGphY2tpbmcgdGhlIHNjcm9sbCBvZiB0aGUgcGFnZVxyXG4gIEBleHRlbmQgJWNvdmVyO1xyXG5cclxuICAvLyBjb2xvcjogJGNvbG9yLXF1YXJ0ZXItc3BhbmlzaC13aGl0ZTtcclxuICAvLyBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3ItY29udGVzc2E7XHJcbiAgY3Vyc29yOiBub25lO1xyXG5cclxuICBmb250LXNpemU6IGNhbGMoXHJcbiAgICAxMDB2dyAvIDE5MjAgKiAxMFxyXG4gICk7IC8qIFNldCBiYXNlIGZvbnQgc2l6ZSBieSB2aWV3cG9ydCB3aWR0aCBmb3Igc3RhbmRhcmQgcmVzb2x1dGlvbiAqL1xyXG4gIGxpbmUtaGVpZ2h0OiAxO1xyXG4gIHBvc2l0aW9uOiBmaXhlZDtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIEBpbmNsdWRlIG1lZGlhKFwiPHBob25lXCIpIHtcclxuICAgIGZvbnQtc2l6ZTogY2FsYyhcclxuICAgICAgMTAwdncgLyA3NTAgKiAxMFxyXG4gICAgKTsgLyogQWRqdXN0IGZvbnQgc2l6ZSBmb3IgcGhvbmUgc2NyZWVuIHJlc29sdXRpb25zICovXHJcbiAgfVxyXG59XHJcblxyXG5ib2R5IHtcclxuICBAZXh0ZW5kICVjb3ZlcjtcclxuICBjdXJzb3I6IG5vbmU7XHJcblxyXG4gIC8vIGZvbnQtZmFtaWx5OiBcIlRyZWJ1Y2hldCBNU1wiLCBzYW5zLXNlcmlmO1xyXG5cclxuICBwb3NpdGlvbjogZml4ZWQ7XHJcbn1cclxuLmNvbnRlbnR7XHJcbiAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxufVxyXG5cclxuLmNvbnRlbnRfX3JvdGF0ZSxcclxuLmNvbnRlbnRfX3JldmVyc2Uge1xyXG4gIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07XHJcblxyXG4gIEBleHRlbmQgJWNvdmVyO1xyXG4gIC8vIGJhY2tncm91bmQtY29sb3I6IHJlZDtcclxufVxyXG5cclxuLmNvbnRlbnRfX21vdmUge1xyXG4gIEBleHRlbmQgJWNvdmVyO1xyXG4gIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybTtcclxufVxyXG4uY3Vyc29yLWRvdCB7XHJcbiAgd2lkdGg6IDVweDtcclxuICBoZWlnaHQ6IDVweDtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDIwJSk7XHJcbn1cclxuLmN1cnNvci1vdXRsaW5lIHtcclxuICB3aWR0aDogMzBweDtcclxuICBoZWlnaHQ6IDMwcHg7XHJcbiAgYm9yZGVyOiAycHggc29saWQgaHNsKDc4LCAxMDAlLCA0MCUpO1xyXG5cclxuICAmOjphZnRlciB7XHJcbiAgICBjb250ZW50OiBhdHRyKGRhdGEtbGFiZWwpO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAtMTBweDtcclxuICAgIGxlZnQ6IDUwcHg7XHJcbiAgICBwYWRkaW5nOiA1cHggMTBweDtcclxuICAgIC8vIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcclxuICAgIGNvbG9yOiBoc2woNzgsIDEwMCUsIDE1JSk7XHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xyXG4gIH1cclxufVxyXG5cclxuLmltYWdlLWhvdmVyLmN1cnNvci1vdXRsaW5lIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woNzgsIDEwMCUsIDkwJSwgMC42KTtcclxuICBib3JkZXI6IG5vbmU7XHJcbn1cclxuLmN1cnNvci1vdXRsaW5lLmltYWdlLWhvdmVyOjphZnRlciB7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbn1cclxuXHJcbi8vXHJcblxyXG4uY3Vyc29yLWRvdCxcclxuLmN1cnNvci1vdXRsaW5lIHtcclxuICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgdG9wOiAwO1xyXG4gIGxlZnQ6IDA7XHJcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XHJcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gIHotaW5kZXg6IDk5OTk5OTtcclxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcclxufVxyXG5cclxuLyogUHNldWRvLWVsZW1lbnQgZm9yIHRoZSBsYWJlbCBuZXh0IHRvIHRoZSBjdXJzb3IgKi9cclxuXHJcbi8qIFNob3cgdGhlIGxhYmVsIHdoZW4gaG92ZXJpbmcgb3ZlciBhbiBpbWFnZSAqL1xyXG5cclxuYSB7XHJcbiAgY29sb3I6IGluaGVyaXQ7XHJcbiAgb3V0bGluZTogbm9uZTtcclxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbn1cclxuXHJcbmJ1dHRvbiB7XHJcbiAgYmFja2dyb3VuZDogbm9uZTtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgY29sb3I6IGluaGVyaXQ7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIG91dGxpbmU6IG5vbmU7XHJcbn1cclxuY2FudmFzIHtcclxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbn1cclxuLy8gaW1nIHtcclxuLy8gICBvcGFjaXR5OiAwO1xyXG4vLyAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC40cyBlYXNlO1xyXG4vLyAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcblxyXG4vLyAgICYubG9hZGVkIHtcclxuLy8gICAgIG9wYWNpdHk6IDE7XHJcbi8vICAgfVxyXG4vLyB9XHJcblxyXG4uY29udGVudCB7XHJcbiAgLy8gdGhlIGNvdmVyIG1peGluIGhlcmUgIGluIGludGVuZGVkIGZvciBoaWdoamFja2luZyB0aGUgc2Nyb2xsIG9mIHRoZSBwYWdlXHJcbiAgLy8gQGV4dGVuZCAlY292ZXI7XHJcbn1cclxuXHJcbltkYXRhLWFuaW1hdGlvbj1cInRpdGxlXCJdLFxyXG5bZGF0YS1hbmltYXRpb249XCJsYWJlbFwiXSxcclxuW2RhdGEtYW5pbWF0aW9uPVwicGFyYWdyYXBoXCJdIHtcclxuICBzcGFuIHtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xyXG4gIH1cclxufVxyXG4iLCIucHJlbG9hZGVyIHtcclxuICBAZXh0ZW5kICVjb3ZlcjtcclxuICBAZXh0ZW5kICVjZW50ZXI7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIGdhcDogM3JlbTtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMSUsIDI3JSk7XHJcbiAgY29sb3I6IGhzbCg3OCwgMTAwJSwgNDUlKTtcclxuXHJcbiAgei1pbmRleDogeihcInByZWxvYWRlclwiKTtcclxufVxyXG5cclxuLm92ZXJsYXkge1xyXG4gIEBleHRlbmQgJWNvdmVyO1xyXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbGEoMCwgMCUsIDAlLCAwLjc1KTtcclxuICB6LWluZGV4OiA0O1xyXG59XHJcblxyXG4ucHJlbG9hZGVyX190ZXh0IHtcclxuICBmb250LWZhbWlseTogJGZvbnQtYmxvd2JydXNoO1xyXG5cclxuICBmb250LXNpemU6IDYuNXJlbTtcclxuICBtYXgtd2lkdGg6IDY2cmVtO1xyXG4gIHotaW5kZXg6IDY3NztcclxuICB0ZXh0LXNoYWRvdzogMCAwIDUwcHggaHNsYSgwLCAwJSwgMCUsIDAuNCk7XHJcbn1cclxuXHJcbi5wcmVsb2FkZXJfX251bWJlciB7XHJcbiAgZm9udC1zaXplOiAycmVtO1xyXG4gIHotaW5kZXg6IDY3NztcclxuXHJcbiAgLy8gYm90dG9tOiA3LjNyZW07XHJcbiAgLy8gbGVmdDogNTAlO1xyXG4gIC8vIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgLy8gcG9zaXRpb246IGFic29sdXRlO1xyXG4gIC8vIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcclxufVxyXG5cclxuLnByZWxvYWRlcl9fbnVtYmVyX190ZXh0IHtcclxuICAvLyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbn1cclxuXHJcbi8vIC5wcmVsb2FkZXJfX2FuaW1hdGlvbiB7XHJcbi8vICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4vLyAgIHotaW5kZXg6IDI7XHJcbi8vICAgaGVpZ2h0OiAxMDAlO1xyXG4vLyAgIHdpZHRoOiAxMDAlO1xyXG4vLyAgIG92ZXJmbG93OiBoaWRkZW47XHJcbi8vIH1cclxuXHJcbi5mcmFtZSB7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHdpZHRoOiAxMDAlOyAvKiBBZGp1c3QgYXMgbmVlZGVkICovXHJcbiAgaGVpZ2h0OiAxMDAlOyAvKiBBZGp1c3QgYXMgbmVlZGVkICovXHJcbiAgdG9wOiAwO1xyXG4gIGxlZnQ6IDA7XHJcbiAgb3BhY2l0eTogMDsgLyogU3RhcnQgd2l0aCBmcmFtZXMgaGlkZGVuICovXHJcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjVzIGVhc2UtaW47IC8qIFNtb290aCB0cmFuc2l0aW9uIGJldHdlZW4gZnJhbWVzICovXHJcbn1cclxuXHJcbi5mcmFtZSBpbWcge1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjA4KTtcclxuICBvcGFjaXR5OiAxO1xyXG4gIGhlaWdodDogMTAwJTtcclxufVxyXG5cclxuLmZyYW1lMSAuaW1nMSB7XHJcbiAgdG9wOiAwO1xyXG4gIGxlZnQ6IDUwdnc7XHJcbn1cclxuLmZyYW1lMSAuaW1nMiB7XHJcbiAgdG9wOiAwO1xyXG4gIHJpZ2h0OiA1MHZ3O1xyXG59XHJcblxyXG4uZnJhbWUyIC5pbWcxIHtcclxuICB0b3A6IDA7XHJcbiAgbGVmdDogNTB2dztcclxufVxyXG4uZnJhbWUyIC5pbWcyIHtcclxuICB0b3A6IDA7XHJcbiAgcmlnaHQ6IDUwdnc7XHJcbn1cclxuXHJcbi5mcmFtZTMgLmltZzEge1xyXG4gIHRvcDogNTAlO1xyXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcclxuICBsZWZ0OiA1MHZ3O1xyXG4gIHdpZHRoOiA1MDBweDtcclxuICBoZWlnaHQ6IDUwMHB4O1xyXG59XHJcbi5mcmFtZTMgLmltZzIge1xyXG4gIHRvcDogMDtcclxuICByaWdodDogNTB2dztcclxufVxyXG4uZnJhbWU0IC5pbWcxIHtcclxuICB0b3A6IDA7XHJcbiAgcmlnaHQ6IDUwdnc7XHJcbiAgd2lkdGg6IDQwMHB4O1xyXG4gIGhlaWdodDogNDAwcHg7XHJcbiAgei1pbmRleDogNjtcclxufVxyXG5cclxuLmZyYW1lNCAuaW1nMiB7XHJcbiAgdG9wOiAwO1xyXG4gIHJpZ2h0OiA1MHZ3O1xyXG59XHJcbi5mcmFtZTQgLmltZzMge1xyXG4gIHRvcDogMDtcclxuICBsZWZ0OiA1MHZ3O1xyXG59XHJcblxyXG4uZnJhbWU1IC5pbWcxIHtcclxuICB0b3A6IDA7XHJcbiAgbGVmdDogNTB2dztcclxufVxyXG5cclxuLmZyYW1lNSAuaW1nMiB7XHJcbiAgdG9wOiAwO1xyXG4gIHJpZ2h0OiA1MHZ3O1xyXG59XHJcbi5mcmFtZTYgLmltZzEge1xyXG4gIHRvcDogMDtcclxuICBsZWZ0OiA1MHZ3O1xyXG59XHJcblxyXG4uZnJhbWU2IC5pbWcyIHtcclxuICB0b3A6IDA7XHJcbiAgcmlnaHQ6IDUwdnc7XHJcbn1cclxuLmZyYW1lNiAuaW1nMyB7XHJcbiAgYm90dG9tOiAwO1xyXG4gIGxlZnQ6IDUwdnc7XHJcbiAgaGVpZ2h0OiA2MCU7XHJcbn1cclxuXHJcbi5mcmFtZTcgLmltZzEge1xyXG4gIHRvcDogMDtcclxuICBsZWZ0OiA1MHZ3O1xyXG59XHJcblxyXG4uZnJhbWU3IC5pbWcyIHtcclxuICB0b3A6IDA7XHJcbiAgcmlnaHQ6IDUwdnc7XHJcbn1cclxuLmZyYW1lNyAuaW1nMyB7XHJcbiAgYm90dG9tOiAyMHB4O1xyXG4gIGxlZnQ6IDUwdnc7XHJcbiAgaGVpZ2h0OiA2MCU7XHJcbn1cclxuLmZyYW1lNyAuaW1nNCB7XHJcbiAgdG9wOiA0MHB4O1xyXG4gIHJpZ2h0OiA1MHZ3O1xyXG4gIGhlaWdodDogNTUwcHg7XHJcbiAgd2lkdGg6IDUwMHB4O1xyXG59XHJcbi5mcmFtZTggLmltZzEge1xyXG4gIHRvcDogMDtcclxuICBsZWZ0OiA1MHZ3O1xyXG59XHJcblxyXG4uZnJhbWU4IC5pbWcyIHtcclxuICB0b3A6IDA7XHJcbiAgcmlnaHQ6IDUwdnc7XHJcbn1cclxuLmZyYW1lOCAuaW1nMyB7XHJcbiAgdG9wOiA0MHB4O1xyXG4gIHJpZ2h0OiA1MHZ3O1xyXG4gIGhlaWdodDogNTUwcHg7XHJcbiAgd2lkdGg6IDUwMHB4O1xyXG59XHJcblxyXG4uZnJhbWU5IC5pbWcxIHtcclxuICB0b3A6IDA7XHJcbiAgbGVmdDogNTB2dztcclxufVxyXG5cclxuLmZyYW1lOSAuaW1nMiB7XHJcbiAgdG9wOiAwO1xyXG4gIHJpZ2h0OiA1MHZ3O1xyXG59XHJcbi5mcmFtZTEwIC5pbWcxIHtcclxuICB0b3A6IDA7XHJcbiAgbGVmdDogNTB2dztcclxufVxyXG5cclxuLmZyYW1lMTAgLmltZzIge1xyXG4gIHRvcDogMDtcclxuICByaWdodDogNTB2dztcclxufVxyXG5cclxuLmZyYW1lMTEgLmltZzEge1xyXG4gIHRvcDogMDtcclxuICBsZWZ0OiA1MHZ3O1xyXG59XHJcblxyXG4uZnJhbWUxMSAuaW1nMiB7XHJcbiAgdG9wOiAwO1xyXG4gIHJpZ2h0OiA1MHZ3O1xyXG59XHJcbi5mcmFtZTEyIC5pbWcxIHtcclxuICB0b3A6IDA7XHJcbiAgbGVmdDogNTB2dztcclxufVxyXG5cclxuLmZyYW1lMTIgLmltZzIge1xyXG4gIHRvcDogMDtcclxuICByaWdodDogNTB2dztcclxufVxyXG4uZnJhbWUxMiAuaW1nMyB7XHJcbiAgdG9wOiAwO1xyXG4gIHJpZ2h0OiA1MHZ3O1xyXG4gIGhlaWdodDogNTUwcHg7XHJcbiAgd2lkdGg6IDUwMHB4O1xyXG59XHJcbi5mcmFtZTEyIC5pbWc0IHtcclxuICBib3R0b206IDA7XHJcbiAgbGVmdDogNTB2dztcclxuICBoZWlnaHQ6IDU1MHB4O1xyXG4gIHdpZHRoOiA1MDBweDtcclxufVxyXG5Aa2V5ZnJhbWVzIHN3aXRjaEZyYW1lcyB7XHJcbiAgMCUge1xyXG4gICAgb3BhY2l0eTogMTtcclxuICB9IC8qIEZyYW1lIGlzIHZpc2libGUgKi9cclxuICA4LjMzJSB7XHJcbiAgICBvcGFjaXR5OiAxO1xyXG4gIH0gLyogTWFpbnRhaW4gdmlzaWJpbGl0eSAqL1xyXG4gIDguMzQlIHtcclxuICAgIG9wYWNpdHk6IDA7XHJcbiAgfSAvKiBTdGFydCBmYWRpbmcgb3V0ICovXHJcbiAgMTAwJSB7XHJcbiAgICBvcGFjaXR5OiAwO1xyXG4gIH0gLyogUmVtYWluIGhpZGRlbiAqL1xyXG59XHJcblxyXG4uZnJhbWUxIHtcclxuICBhbmltYXRpb246IHN3aXRjaEZyYW1lcyA2cyBpbmZpbml0ZTtcclxufVxyXG4uZnJhbWUyIHtcclxuICBhbmltYXRpb246IHN3aXRjaEZyYW1lcyA2cyBpbmZpbml0ZTtcclxuICBhbmltYXRpb24tZGVsYXk6IDAuNXM7XHJcbn1cclxuLmZyYW1lMyB7XHJcbiAgYW5pbWF0aW9uOiBzd2l0Y2hGcmFtZXMgNnMgaW5maW5pdGU7XHJcbiAgYW5pbWF0aW9uLWRlbGF5OiAxcztcclxufVxyXG4uZnJhbWU0IHtcclxuICBhbmltYXRpb246IHN3aXRjaEZyYW1lcyA2cyBpbmZpbml0ZTtcclxuICBhbmltYXRpb24tZGVsYXk6IDEuNXM7XHJcbn1cclxuLmZyYW1lNSB7XHJcbiAgYW5pbWF0aW9uOiBzd2l0Y2hGcmFtZXMgNnMgaW5maW5pdGU7XHJcbiAgYW5pbWF0aW9uLWRlbGF5OiAycztcclxufVxyXG4uZnJhbWU2IHtcclxuICBhbmltYXRpb246IHN3aXRjaEZyYW1lcyA2cyBpbmZpbml0ZTtcclxuICBhbmltYXRpb24tZGVsYXk6IDIuNXM7XHJcbn1cclxuLmZyYW1lNyB7XHJcbiAgYW5pbWF0aW9uOiBzd2l0Y2hGcmFtZXMgNnMgaW5maW5pdGU7XHJcbiAgYW5pbWF0aW9uLWRlbGF5OiAzcztcclxufVxyXG4uZnJhbWU4IHtcclxuICBhbmltYXRpb246IHN3aXRjaEZyYW1lcyA2cyBpbmZpbml0ZTtcclxuICBhbmltYXRpb24tZGVsYXk6IDMuNXM7XHJcbn1cclxuLmZyYW1lOSB7XHJcbiAgYW5pbWF0aW9uOiBzd2l0Y2hGcmFtZXMgNnMgaW5maW5pdGU7XHJcbiAgYW5pbWF0aW9uLWRlbGF5OiA0cztcclxufVxyXG4uZnJhbWUxMCB7XHJcbiAgYW5pbWF0aW9uOiBzd2l0Y2hGcmFtZXMgNnMgaW5maW5pdGU7XHJcbiAgYW5pbWF0aW9uLWRlbGF5OiA0LjVzO1xyXG59XHJcbi5mcmFtZTExIHtcclxuICBhbmltYXRpb246IHN3aXRjaEZyYW1lcyA2cyBpbmZpbml0ZTtcclxuICBhbmltYXRpb24tZGVsYXk6IDVzO1xyXG59XHJcbi5mcmFtZTEyIHtcclxuICBhbmltYXRpb246IHN3aXRjaEZyYW1lcyA2cyBpbmZpbml0ZTtcclxuICBhbmltYXRpb24tZGVsYXk6IDUuNXM7XHJcbn1cclxuIiwiLm5hdmlnYXRpb24ge1xyXG4gIEBleHRlbmQgJWNvdmVyO1xyXG4gIGhlaWdodDogbWF4LWNvbnRlbnQ7XHJcblxyXG4gIGZvbnQtc2l6ZTogMTZweDtcclxuICBwYWRkaW5nOiAycmVtIDRyZW07XHJcbiAgei1pbmRleDogeihcIm5hdmlnYXRpb25cIik7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgLy8gY29sb3I6IGhzbCgwLCAwJSwgMjclKTtcclxuICBjb2xvcjogaHNsKDc4IDEwMCUgMTUlIC8gMSk7XHJcblxyXG4gIGZvbnQtZmFtaWx5OiAkZm9udC1nZW9yZ2UteDtcclxufVxyXG5cclxuLm5hdmlnYXRpb25fX2xpbmsge1xyXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICBAZXh0ZW5kICV0aXRsZS0yMDtcclxufVxyXG5cclxuLm5hdmlnYXRpb25fX2xpc3Qge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZ2FwOiA0cmVtO1xyXG59XHJcblxyXG4ubmF2aWdhdGlvbl9fbGlzdF9fbGluayB7XHJcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gIEBleHRlbmQgJXRpdGxlLTIwO1xyXG59XHJcblxyXG4ubmF2aWdhdGlvbl9fbGlzdF9faXRlbSB7XHJcbn1cclxuIiwiLmhvbWUge1xyXG4gIEBleHRlbmQgJXBhZ2U7XHJcblxyXG4gIHBhZGRpbmctdG9wOiA3cmVtO1xyXG4gIGZvbnQtZmFtaWx5OiAkZm9udC1ibG93YnJ1c2g7XHJcbiAgZm9udC1zaXplOiAzcmVtO1xyXG5cclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmNWY1O1xyXG4gIGNvbG9yOiAjNDQ0NDQ0O1xyXG59XHJcbi5nYWxsZXJpZXMge1xyXG4gIGZvbnQtZmFtaWx5OiBcImJsb3dicnVzaFwiO1xyXG4gIGNvbG9yOiBoc2woNzggMTAwJSAxNSUgLyAxKTtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgbGVmdDogNTAlO1xyXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcclxuICB0b3A6IDRyZW07XHJcbiAgei1pbmRleDogMjtcclxuICBmb250LXNpemU6IDZyZW07XHJcbiAgQGluY2x1ZGUgbWVkaWEoXCI8cGhvbmVcIikge1xyXG4gICAgdG9wOiAxN3JlbTtcclxuICB9XHJcbn1cclxuLmJveCB7XHJcbiAgd2lkdGg6IDEwMHZ3O1xyXG4gIGhlaWdodDogMTAwdmg7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogcHVycGxlO1xyXG59XHJcbi5iYW5uZXIge1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICB6LWluZGV4OiAxO1xyXG4gIG1hcmdpbi10b3A6IDEwdmg7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgLy8gb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBkaXNwbGF5OiBncmlkO1xyXG4gIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcclxuICBoZWlnaHQ6IDEwMHZoO1xyXG4gIEBpbmNsdWRlIG1lZGlhKFwiPHBob25lXCIpIHtcclxuICAgIG1hcmdpbi10b3A6IDE4dmg7XHJcbiAgfVxyXG59XHJcblxyXG4uYmFubmVyIC5zbGlkZXIge1xyXG4gIHRvcDogMDtcclxuICB3aWR0aDogMjB2dztcclxuICBtYXgtd2lkdGg6IDE3MHB4O1xyXG4gIGFzcGVjdC1yYXRpbzogMyAvIDQ7XHJcbiAgdHJhbnNmb3JtLXN0eWxlOiBwcmVzZXJ2ZS0zZDtcclxuICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDEwMDBweCk7IC8qIEVuc3VyZSBpdCdzIGhvcml6b250YWxseSBjZW50ZXJlZCAqL1xyXG4gIGFuaW1hdGlvbjogYXV0b1J1biA0MnMgbGluZWFyIGluZmluaXRlO1xyXG59XHJcblxyXG5Aa2V5ZnJhbWVzIGF1dG9SdW4ge1xyXG4gIGZyb20ge1xyXG4gICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSgxMDAwcHgpIHJvdGF0ZVgoLTE2ZGVnKSByb3RhdGVZKDBkZWcpO1xyXG4gIH1cclxuICB0byB7XHJcbiAgICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDEwMDBweCkgcm90YXRlWCgtMTZkZWcpIHJvdGF0ZVkoMzYwZGVnKTtcclxuICB9XHJcblxyXG4gIEBpbmNsdWRlIG1lZGlhKFwiPHBob25lXCIpIHtcclxuICAgIGZyb20ge1xyXG4gICAgICAvLyB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDEwMDBweCkgcm90YXRlWCgtMzZkZWcpIHJvdGF0ZVkoMGRlZyk7XHJcbiAgICB9XHJcbiAgICB0byB7XHJcbiAgICAgIC8vIHRyYW5zZm9ybTogcGVyc3BlY3RpdmUoMTAwMHB4KSByb3RhdGVYKC0yNmRlZykgcm90YXRlWSgzNjBkZWcpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLmJhbm5lciAuc2xpZGVyIC5pdGVtIHtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgaW5zZXQ6IDAgMCAwIDA7XHJcbiAgdHJhbnNmb3JtOiByb3RhdGVZKGNhbGModmFyKC0tcG9zaXRpb24pICogKDM2MCAvIHZhcigtLXF1YW50aXR5KSkgKiAtMWRlZykpXHJcbiAgICB0cmFuc2xhdGVaKG1pbigzOHZ3LCA0ODBweCkpO1xyXG4gIHRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2Q7XHJcblxyXG4gIC8vIHNjYWxlOiAwLjc7XHJcblxyXG4gIC8vICY6aG92ZXIge1xyXG4gIC8vICAgc2NhbGU6IDE7XHJcbiAgLy8gfVxyXG59XHJcblxyXG4vLyAuc2xpZGVyOm50aC1jaGlsZCgxKSB7XHJcbi8vICAgYW5pbWF0aW9uOiBhdXRvUnVuIDQycyBsaW5lYXIgaW5maW5pdGU7XHJcbi8vIH1cclxuXHJcbi5pdGVtIGltZyB7XHJcbiAgZmlsdGVyOiBncmF5c2NhbGUoMTAwJSk7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgaGVpZ2h0OiAxMDAlO1xyXG4gIG9iamVjdC1maXQ6IGNvdmVyO1xyXG4gIGFuaW1hdGlvbjogZ3JheXNjYWxlRWZmZWN0IDQycyBpbmZpbml0ZTtcclxuICB6LWluZGV4OiAxO1xyXG59XHJcblxyXG4uaW4tdmlldyBpbWcge1xyXG4gIGZpbHRlcjogZ3JheXNjYWxlKDAlKTtcclxufVxyXG5cclxuLyogS2V5ZnJhbWVzIHRvIGNvbnRyb2wgdGhlIGdyYXlzY2FsZSByZW1vdmFsIGJhc2VkIG9uIHRpbWUgKi9cclxuQGtleWZyYW1lcyBncmF5c2NhbGVFZmZlY3Qge1xyXG4gIDIwJSB7XHJcbiAgICBmaWx0ZXI6IGdyYXlzY2FsZSgwJSk7XHJcbiAgICAvLyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTcwcHgpIHJvdGF0ZVgoMTVkZWcpO1xyXG4gICAgLy8gdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDBweCk7IC8qIFJlbW92ZSBncmF5c2NhbGUgZm9yIHRoZSBmaXJzdCAyIHNlY29uZHMgKi9cclxuICB9XHJcbiAgNzAlIHtcclxuICAgIGZpbHRlcjogZ3JheXNjYWxlKDEwMCUpO1xyXG4gICAgLy8gdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDBweCkgcm90YXRlWCgwZGVnKTtcclxuICB9XHJcbiAgMTAwJSB7XHJcbiAgICBmaWx0ZXI6IGdyYXlzY2FsZSgxMDAlKTtcclxuICB9XHJcbn1cclxuXHJcbkBrZXlmcmFtZXMgb3BhY2l0eUVmZmVjdCB7XHJcbiAgNCUge1xyXG4gICAgb3BhY2l0eTogMDtcclxuICAgIC8vIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNzBweCkgcm90YXRlWCgxNWRlZyk7XHJcbiAgICAvLyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMHB4KTsgLyogUmVtb3ZlIGdyYXlzY2FsZSBmb3IgdGhlIGZpcnN0IDIgc2Vjb25kcyAqL1xyXG4gIH1cclxuICAxMiUge1xyXG4gICAgb3BhY2l0eTogMTtcclxuICAgIC8vIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNzBweCkgcm90YXRlWCgxNWRlZyk7XHJcbiAgICAvLyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMHB4KTsgLyogUmVtb3ZlIGdyYXlzY2FsZSBmb3IgdGhlIGZpcnN0IDIgc2Vjb25kcyAqL1xyXG4gIH1cclxuICAyMiUge1xyXG4gICAgb3BhY2l0eTogMDtcclxuICAgIC8vIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwcHgpIHJvdGF0ZVgoMGRlZyk7XHJcbiAgfVxyXG4gIDEwMCUge1xyXG4gICAgb3BhY2l0eTogMDtcclxuICB9XHJcbn1cclxuXHJcbi8qIEZvciBlYWNoIGl0ZW0sIGRlbGF5IHRoZSBhbmltYXRpb24gYnkgM3MgaW5jcmVtZW50YWxseSAqL1xyXG4uYmFubmVyIC5zbGlkZXIgLml0ZW06bnRoLWNoaWxkKDEpIGltZyxcclxuLmdhbGxlcnlfX2RldGFpbHMgLmdhbGxlcnlfX2RldGFpbHNfX2l0ZW06bnRoLWNoaWxkKDEpIHtcclxuICBhbmltYXRpb24tZGVsYXk6IDBzOyAvKiBTdGFydCBpbW1lZGlhdGVseSAqL1xyXG59XHJcblxyXG4uYmFubmVyIC5zbGlkZXIgLml0ZW06bnRoLWNoaWxkKDIpIGltZyxcclxuLmdhbGxlcnlfX2RldGFpbHMgLmdhbGxlcnlfX2RldGFpbHNfX2l0ZW06bnRoLWNoaWxkKDIpIHtcclxuICBhbmltYXRpb24tZGVsYXk6IDZzOyAvKiBEZWxheSBieSAzIHNlY29uZHMgKi9cclxufVxyXG5cclxuLmJhbm5lciAuc2xpZGVyIC5pdGVtOm50aC1jaGlsZCgzKSBpbWcsXHJcbi5nYWxsZXJ5X19kZXRhaWxzIC5nYWxsZXJ5X19kZXRhaWxzX19pdGVtOm50aC1jaGlsZCgzKSB7XHJcbiAgYW5pbWF0aW9uLWRlbGF5OiAxMnM7IC8qIERlbGF5IGJ5IDYgc2Vjb25kcyAqL1xyXG59XHJcblxyXG4uYmFubmVyIC5zbGlkZXIgLml0ZW06bnRoLWNoaWxkKDQpIGltZyxcclxuLmdhbGxlcnlfX2RldGFpbHMgLmdhbGxlcnlfX2RldGFpbHNfX2l0ZW06bnRoLWNoaWxkKDQpIHtcclxuICBhbmltYXRpb24tZGVsYXk6IDE4czsgLyogRGVsYXkgYnkgOSBzZWNvbmRzICovXHJcbn1cclxuXHJcbi5iYW5uZXIgLnNsaWRlciAuaXRlbTpudGgtY2hpbGQoNSkgaW1nLFxyXG4uZ2FsbGVyeV9fZGV0YWlscyAuZ2FsbGVyeV9fZGV0YWlsc19faXRlbTpudGgtY2hpbGQoNSkge1xyXG4gIGFuaW1hdGlvbi1kZWxheTogMjRzOyAvKiBEZWxheSBieSAxMiBzZWNvbmRzICovXHJcbn1cclxuXHJcbi5iYW5uZXIgLnNsaWRlciAuaXRlbTpudGgtY2hpbGQoNikgaW1nLFxyXG4uZ2FsbGVyeV9fZGV0YWlscyAuZ2FsbGVyeV9fZGV0YWlsc19faXRlbTpudGgtY2hpbGQoNikge1xyXG4gIGFuaW1hdGlvbi1kZWxheTogMzBzOyAvKiBEZWxheSBieSAxNSBzZWNvbmRzICovXHJcbn1cclxuLmJhbm5lciAuc2xpZGVyIC5pdGVtOm50aC1jaGlsZCg3KSBpbWcsXHJcbi5nYWxsZXJ5X19kZXRhaWxzIC5nYWxsZXJ5X19kZXRhaWxzX19pdGVtOm50aC1jaGlsZCg3KSB7XHJcbiAgYW5pbWF0aW9uLWRlbGF5OiAzNnM7IC8qIERlbGF5IGJ5IDE1IHNlY29uZHMgKi9cclxufVxyXG5cclxuLmdhbGxlcnlfX2RldGFpbHMge1xyXG4gIEBleHRlbmQgJWNvdmVyO1xyXG59XHJcbi5nYWxsZXJ5X19kZXRhaWxzX19pdGVtIHtcclxuICBvcGFjaXR5OiAwO1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICB0b3A6IDcwdmg7XHJcbiAgbGVmdDogOHJlbTtcclxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDEuNXMgZWFzZS1pbjtcclxuICBhbmltYXRpb246IG9wYWNpdHlFZmZlY3QgNDJzIGluZmluaXRlO1xyXG4gIEBpbmNsdWRlIG1lZGlhKFwiPHBob25lXCIpIHtcclxuICAgIHRvcDogNjB2aDtcclxuICB9XHJcbn1cclxuXHJcbi5nYWxsZXJ5X19kZXRhaWxzX190aXRsZSB7XHJcbiAgY29sb3I6IGhzbCg3OCAxMDAlIDE1JSAvIDEpO1xyXG5cclxuICBAZXh0ZW5kICV0aXRsZS02MDtcclxufVxyXG4uZ2FsbGVyeV9fZGV0YWlsc19fcGFyYWdyYXBoIHtcclxuICBmb250LWZhbWlseTogJGZvbnQtbW9udHNlcnJhdDtcclxuICBtYXJnaW4tdG9wOiAycmVtO1xyXG4gIEBleHRlbmQgJWRlc2NyaXB0aW9uLTE2O1xyXG5cclxuICBtYXgtd2lkdGg6IDQ0cmVtO1xyXG59XHJcblxyXG5cclxuXHJcbiAgIC5ob21lX19yZXZlYWxlcntcclxuXHJcbiAgd2lkdGg6IDMwMHZoO1xyXG4gIGhlaWdodDogMzAwdmg7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHotaW5kZXg6IDEwO1xyXG4gIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAzMDB2aCkgcm90YXRlKDE2ZGVnKTtcclxuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1xyXG4gICB9XHJcblxyXG4gICBcclxuICAgLmhvbWVfX3JldmVhbGVyX190ZXh0e1xyXG4gICAgICAgIGZvbnQtZmFtaWx5OiAkZm9udC1ibG93YnJ1c2g7XHJcbiAgICBjb2xvcjogaHNsKDc4LCAxMDAlLCA1NSUpO1xyXG4gICAgICAgIGZvbnQtc2l6ZTogNi41cmVtO1xyXG4gICAgICAgIHdpbGwtY2hhbmdlOiBvcGFjaXR5O1xyXG5cclxuICAgfVxyXG5cclxuICAgICJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==*/