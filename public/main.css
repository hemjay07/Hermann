/*!******************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./styles/index.scss ***!
  \******************************************************************************************************************************************************/
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}

body {
  line-height: 1;
}

ol,
ul {
  list-style: none;
}

blockquote,
q {
  quotes: none;
}

blockquote:before,
blockquote:after,
q:before,
q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

.gallery__details, .contact, .details, .navigation, .overlay, .preloader, .content__move, .content__rotate,
.content__reverse, body, html, .home {
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%;
}

.contact, .details, .preloader {
  align-items: center;
  display: flex;
  justify-content: center;
}

.dg.ac {
  z-index: 99999 !important;
}

.gallery__details__paragraph {
  font-size: 1.6rem;
  font-weight: 300;
  line-height: 1.5;
}
@media (max-width: 767px) {
  .gallery__details__paragraph {
    font-size: 2.8rem;
  }
}

.navigation__list__link, .navigation__link {
  font-family: "George X";
  font-size: 2rem;
}
@media (max-width: 767px) {
  .navigation__list__link, .navigation__link {
    font-size: 3rem;
  }
}

.gallery__details__title {
  font-family: "George X";
  font-size: 8rem;
}

@font-face {
  font-family: "blowbrush";
  src: url(d5e7cdbde66a407b5108.otf) format("opentype"), url(31b0d65ca7795d041afe.ttf) format("truetype");
  font-weight: normal;
  font-style: normal;
}
@font-face {
  font-family: "George X";
  src: url(a4a8eb53627b3d1a4201.woff2) format("woff2"), url(309bcc58a57b38d7fbf6.woff) format("woff");
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Suisse BP";
  src: url(0e6b7bf4aefb74735816.woff2) format("woff2"), url(65915d9417a4a6661e27.woff) format("woff");
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Suisse BP";
  src: url(fa32cf40d8b3cb0a9a0e.woff2) format("woff2"), url(98ccc5d5390b7fe7a79c.woff) format("woff");
  font-weight: 300;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Suisse BP";
  src: url(c186d81e6e7f1863599b.woff2) format("woff2"), url(03ccdb4fca57bb51c559.woff) format("woff");
  font-weight: 200;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Montserrat";
  src: url(7e687123cd4528224ce5.ttf) format("truetype");
  font-weight: normal;
  font-style: normal;
}
*,
*:after,
*:before {
  box-sizing: border-box;
  user-select: none;
  cursor: none;
}

html {
  cursor: none;
  font-size: 0.5208333333vw; /* Set base font size by viewport width for standard resolution */
  line-height: 1;
  position: fixed;
  overflow: hidden;
}
@media (max-width: 767px) {
  html {
    font-size: 1.3333333333vw; /* Adjust font size for phone screen resolutions */
  }
}

body {
  cursor: none;
  position: fixed;
}

.content__move {
  overflow: hidden;
}

.cursor-dot {
  width: 5px;
  height: 5px;
  background-color: hsl(0, 0%, 20%);
}

.cursor-outline {
  width: 30px;
  height: 30px;
  border: 2px solid hsl(78, 100%, 40%);
}
.cursor-outline::after {
  content: attr(data-label);
  position: absolute;
  top: -10px;
  left: 50px;
  padding: 5px 10px;
  color: hsl(78, 100%, 15%);
  font-size: 16px;
  border-radius: 4px;
  white-space: nowrap;
  display: none;
  pointer-events: none;
}

.image-hover.cursor-outline {
  background-color: hsla(78, 100%, 90%, 0.6);
  border: none;
}

.cursor-outline.image-hover::after {
  display: block;
}

.cursor-dot,
.cursor-outline {
  position: fixed;
  top: 0;
  left: 0;
  transform: translate(-50%, -50%);
  border-radius: 50%;
  z-index: 999999;
  pointer-events: none;
}

/* Pseudo-element for the label next to the cursor */
/* Show the label when hovering over an image */
a {
  color: inherit;
  outline: none;
  text-decoration: none;
}

button {
  background: none;
  border: none;
  color: inherit;
  cursor: pointer;
  outline: none;
}

canvas {
  pointer-events: none;
  position: relative;
}

[data-animation=title] span,
[data-animation=label] span,
[data-animation=paragraph] span {
  display: inline-block;
  overflow: hidden;
  vertical-align: top;
}

.preloader {
  display: flex;
  flex-direction: column;
  gap: 3rem;
  background-color: hsl(0, 1%, 27%);
  color: hsl(78, 100%, 45%);
  z-index: 3;
}

.overlay {
  background-color: hsla(0, 0%, 0%, 0.75);
  z-index: 4;
}

.preloader__text {
  font-family: "blowbrush";
  font-size: 6.5rem;
  max-width: 66rem;
  z-index: 677;
  text-shadow: 0 0 50px hsla(0, 0%, 0%, 0.4);
}

.preloader__number {
  font-size: 2rem;
  z-index: 677;
}

.frame {
  position: absolute;
  width: 100%; /* Adjust as needed */
  height: 100%; /* Adjust as needed */
  top: 0;
  left: 0;
  opacity: 0; /* Start with frames hidden */
  transition: opacity 0.5s ease-in; /* Smooth transition between frames */
}

.frame img {
  position: absolute;
  background: rgba(255, 255, 255, 0.208);
  opacity: 1;
  height: 100%;
}

.frame1 .img1 {
  top: 0;
  left: 50vw;
}

.frame1 .img2 {
  top: 0;
  right: 50vw;
}

.frame2 .img1 {
  top: 0;
  left: 50vw;
}

.frame2 .img2 {
  top: 0;
  right: 50vw;
}

.frame3 .img1 {
  top: 50%;
  transform: translateY(-50%);
  left: 50vw;
  width: 500px;
  height: 500px;
}

.frame3 .img2 {
  top: 0;
  right: 50vw;
}

.frame4 .img1 {
  top: 0;
  right: 50vw;
  width: 400px;
  height: 400px;
  z-index: 6;
}

.frame4 .img2 {
  top: 0;
  right: 50vw;
}

.frame4 .img3 {
  top: 0;
  left: 50vw;
}

.frame5 .img1 {
  top: 0;
  left: 50vw;
}

.frame5 .img2 {
  top: 0;
  right: 50vw;
}

.frame6 .img1 {
  top: 0;
  left: 50vw;
}

.frame6 .img2 {
  top: 0;
  right: 50vw;
}

.frame6 .img3 {
  bottom: 0;
  left: 50vw;
  height: 60%;
}

.frame7 .img1 {
  top: 0;
  left: 50vw;
}

.frame7 .img2 {
  top: 0;
  right: 50vw;
}

.frame7 .img3 {
  bottom: 20px;
  left: 50vw;
  height: 60%;
}

.frame7 .img4 {
  top: 40px;
  right: 50vw;
  height: 550px;
  width: 500px;
}

.frame8 .img1 {
  top: 0;
  left: 50vw;
}

.frame8 .img2 {
  top: 0;
  right: 50vw;
}

.frame8 .img3 {
  top: 40px;
  right: 50vw;
  height: 550px;
  width: 500px;
}

.frame9 .img1 {
  top: 0;
  left: 50vw;
}

.frame9 .img2 {
  top: 0;
  right: 50vw;
}

.frame10 .img1 {
  top: 0;
  left: 50vw;
}

.frame10 .img2 {
  top: 0;
  right: 50vw;
}

.frame11 .img1 {
  top: 0;
  left: 50vw;
}

.frame11 .img2 {
  top: 0;
  right: 50vw;
}

.frame12 .img1 {
  top: 0;
  left: 50vw;
}

.frame12 .img2 {
  top: 0;
  right: 50vw;
}

.frame12 .img3 {
  top: 0;
  right: 50vw;
  height: 550px;
  width: 500px;
}

.frame12 .img4 {
  bottom: 0;
  left: 50vw;
  height: 550px;
  width: 500px;
}

@keyframes switchFrames {
  0% {
    opacity: 1;
  } /* Frame is visible */
  8.33% {
    opacity: 1;
  } /* Maintain visibility */
  8.34% {
    opacity: 0;
  } /* Start fading out */
  100% {
    opacity: 0;
  } /* Remain hidden */
}
.frame1 {
  animation: switchFrames 6s infinite;
}

.frame2 {
  animation: switchFrames 6s infinite;
  animation-delay: 0.5s;
}

.frame3 {
  animation: switchFrames 6s infinite;
  animation-delay: 1s;
}

.frame4 {
  animation: switchFrames 6s infinite;
  animation-delay: 1.5s;
}

.frame5 {
  animation: switchFrames 6s infinite;
  animation-delay: 2s;
}

.frame6 {
  animation: switchFrames 6s infinite;
  animation-delay: 2.5s;
}

.frame7 {
  animation: switchFrames 6s infinite;
  animation-delay: 3s;
}

.frame8 {
  animation: switchFrames 6s infinite;
  animation-delay: 3.5s;
}

.frame9 {
  animation: switchFrames 6s infinite;
  animation-delay: 4s;
}

.frame10 {
  animation: switchFrames 6s infinite;
  animation-delay: 4.5s;
}

.frame11 {
  animation: switchFrames 6s infinite;
  animation-delay: 5s;
}

.frame12 {
  animation: switchFrames 6s infinite;
  animation-delay: 5.5s;
}

.navigation {
  height: max-content;
  font-size: 16px;
  padding: 2rem 4rem;
  z-index: 2;
  display: flex;
  justify-content: space-between;
  color: hsl(78, 100%, 15%);
  font-family: "George X";
}

.navigation__link {
  text-decoration: none;
}

.navigation__list {
  display: flex;
  gap: 4rem;
}

.navigation__list__link {
  text-decoration: none;
}

.home {
  padding-top: 7rem;
  font-family: "blowbrush";
  font-size: 3rem;
  background-color: #f5f5f5;
  color: #444444;
}

.galleries {
  font-family: "blowbrush";
  color: hsl(78, 100%, 15%);
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
  top: 4rem;
  z-index: 2;
  font-size: 6rem;
}
@media (max-width: 767px) {
  .galleries {
    top: 17rem;
  }
}

.box {
  width: 100vw;
  height: 100vh;
  background-color: purple;
}

.banner {
  position: absolute;
  z-index: 1;
  margin-top: 10vh;
  width: 100%;
  display: grid;
  justify-items: center;
  height: 100vh;
}
@media (max-width: 767px) {
  .banner {
    margin-top: 18vh;
  }
}

.banner .slider {
  top: 0;
  width: 20vw;
  max-width: 170px;
  aspect-ratio: 3/4;
  transform-style: preserve-3d;
  transform: perspective(1000px); /* Ensure it's horizontally centered */
  animation: autoRun 42s linear infinite;
}

@keyframes autoRun {
  from {
    transform: perspective(1000px) rotateX(-16deg) rotateY(0deg);
  }
  to {
    transform: perspective(1000px) rotateX(-16deg) rotateY(360deg);
  }
}
.banner .slider .item {
  position: absolute;
  inset: 0 0 0 0;
  transform: rotateY(calc(var(--position) * 360 / var(--quantity) * -1deg)) translateZ(min(38vw, 480px));
  transform-style: preserve-3d;
}

.item img {
  filter: grayscale(100%);
  width: 100%;
  height: 100%;
  object-fit: cover;
  animation: grayscaleEffect 42s infinite;
  z-index: 1;
}

.in-view img {
  filter: grayscale(0%);
}

/* Keyframes to control the grayscale removal based on time */
@keyframes grayscaleEffect {
  20% {
    filter: grayscale(0%);
  }
  70% {
    filter: grayscale(100%);
  }
  100% {
    filter: grayscale(100%);
  }
}
@keyframes opacityEffect {
  4% {
    opacity: 0;
  }
  12% {
    opacity: 1;
  }
  22% {
    opacity: 0;
  }
  100% {
    opacity: 0;
  }
}
/* For each item, delay the animation by 3s incrementally */
.banner .slider .item:nth-child(1) img,
.gallery__details .gallery__details__item:nth-child(1) {
  animation-delay: 0s; /* Start immediately */
}

.banner .slider .item:nth-child(2) img,
.gallery__details .gallery__details__item:nth-child(2) {
  animation-delay: 6s; /* Delay by 3 seconds */
}

.banner .slider .item:nth-child(3) img,
.gallery__details .gallery__details__item:nth-child(3) {
  animation-delay: 12s; /* Delay by 6 seconds */
}

.banner .slider .item:nth-child(4) img,
.gallery__details .gallery__details__item:nth-child(4) {
  animation-delay: 18s; /* Delay by 9 seconds */
}

.banner .slider .item:nth-child(5) img,
.gallery__details .gallery__details__item:nth-child(5) {
  animation-delay: 24s; /* Delay by 12 seconds */
}

.banner .slider .item:nth-child(6) img,
.gallery__details .gallery__details__item:nth-child(6) {
  animation-delay: 30s; /* Delay by 15 seconds */
}

.banner .slider .item:nth-child(7) img,
.gallery__details .gallery__details__item:nth-child(7) {
  animation-delay: 36s; /* Delay by 15 seconds */
}

.gallery__details__item {
  opacity: 0;
  position: absolute;
  top: 70vh;
  left: 8rem;
  transition: opacity 1.5s ease-in;
  animation: opacityEffect 42s infinite;
}
@media (max-width: 767px) {
  .gallery__details__item {
    top: 60vh;
  }
}

.gallery__details__title {
  color: hsl(78, 100%, 15%);
}

.gallery__details__paragraph {
  font-family: "Montserrat";
  margin-top: 2rem;
  max-width: 44rem;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/